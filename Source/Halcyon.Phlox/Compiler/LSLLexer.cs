//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.3.1.7705
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.3.1.7705 LSL.g 2012-05-22 12:14:57

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162


using System.Collections.Generic;
using Antlr.Runtime;

namespace  Halcyon.Phlox.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.3.1.7705")]
[System.CLSCompliant(false)]
public partial class LSLLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int ASSIGN_EQ=4;
	public const int COMMA=5;
	public const int COMMENT_BLOCK=6;
	public const int COMMENT_SINGLE=7;
	public const int DO_WHILE_STMT=8;
	public const int ELIST=9;
	public const int ELSE_PART=10;
	public const int ESC_SEQ=11;
	public const int EVENT_DEF=12;
	public const int EXPONENT=13;
	public const int EXPR=14;
	public const int FLOAT_LITERAL=15;
	public const int FOR_STMT=16;
	public const int FUNC_BLOCK=17;
	public const int GT=18;
	public const int ID=19;
	public const int IF_STMT=20;
	public const int INDEX=21;
	public const int INTEGER_LITERAL=22;
	public const int JUMP_STMT=23;
	public const int LABEL=24;
	public const int LIST_LITERAL=25;
	public const int LPAREN=26;
	public const int LT=27;
	public const int METHOD_CALL=28;
	public const int METHOD_DEF=29;
	public const int MINUS=30;
	public const int NEWLINE=31;
	public const int PARAM_DECL=32;
	public const int POST_DECREMENT=33;
	public const int POST_INCREMENT=34;
	public const int PRE_DECREMENT=35;
	public const int PRE_INCREMENT=36;
	public const int RETURN_STMT=37;
	public const int ROTATION_LITERAL=38;
	public const int RPAREN=39;
	public const int SEMI=40;
	public const int STATE_BLOCK=41;
	public const int STATE_CHG=42;
	public const int STATE_DEF=43;
	public const int STRING_LITERAL=44;
	public const int SUBSCRIPT=45;
	public const int TYPE=46;
	public const int TYPE_CAST=47;
	public const int UNARY_BIT_NOT=48;
	public const int UNARY_BOOL_NOT=49;
	public const int UNARY_MINUS=50;
	public const int VAR_DECL=51;
	public const int VECTOR_LITERAL=52;
	public const int WHILE_STMT=53;
	public const int WS=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;

    // delegates
    // delegators

	public LSLLexer()
	{
		OnCreated();
	}

	public LSLLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public LSLLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{


		OnCreated();
	}
	public override string GrammarFileName { get { return "LSL.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_ASSIGN_EQ();
	partial void LeaveRule_ASSIGN_EQ();

	// $ANTLR start "ASSIGN_EQ"
	[GrammarRule("ASSIGN_EQ")]
	private void mASSIGN_EQ()
	{
		EnterRule_ASSIGN_EQ();
		EnterRule("ASSIGN_EQ", 1);
		TraceIn("ASSIGN_EQ", 1);
		try
		{
			int _type = ASSIGN_EQ;
			int _channel = DefaultTokenChannel;
			// LSL.g:9:11: ( '=' )
			DebugEnterAlt(1);
			// LSL.g:9:13: '='
			{
			DebugLocation(9, 13);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN_EQ", 1);
			LeaveRule("ASSIGN_EQ", 1);
			LeaveRule_ASSIGN_EQ();
		}
	}
	// $ANTLR end "ASSIGN_EQ"

	partial void EnterRule_COMMA();
	partial void LeaveRule_COMMA();

	// $ANTLR start "COMMA"
	[GrammarRule("COMMA")]
	private void mCOMMA()
	{
		EnterRule_COMMA();
		EnterRule("COMMA", 2);
		TraceIn("COMMA", 2);
		try
		{
			int _type = COMMA;
			int _channel = DefaultTokenChannel;
			// LSL.g:10:7: ( ',' )
			DebugEnterAlt(1);
			// LSL.g:10:9: ','
			{
			DebugLocation(10, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMA", 2);
			LeaveRule("COMMA", 2);
			LeaveRule_COMMA();
		}
	}
	// $ANTLR end "COMMA"

	partial void EnterRule_T__55();
	partial void LeaveRule_T__55();

	// $ANTLR start "T__55"
	[GrammarRule("T__55")]
	private void mT__55()
	{
		EnterRule_T__55();
		EnterRule("T__55", 3);
		TraceIn("T__55", 3);
		try
		{
			int _type = T__55;
			int _channel = DefaultTokenChannel;
			// LSL.g:11:7: ( '!' )
			DebugEnterAlt(1);
			// LSL.g:11:9: '!'
			{
			DebugLocation(11, 9);
			Match('!'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__55", 3);
			LeaveRule("T__55", 3);
			LeaveRule_T__55();
		}
	}
	// $ANTLR end "T__55"

	partial void EnterRule_T__56();
	partial void LeaveRule_T__56();

	// $ANTLR start "T__56"
	[GrammarRule("T__56")]
	private void mT__56()
	{
		EnterRule_T__56();
		EnterRule("T__56", 4);
		TraceIn("T__56", 4);
		try
		{
			int _type = T__56;
			int _channel = DefaultTokenChannel;
			// LSL.g:12:7: ( '!=' )
			DebugEnterAlt(1);
			// LSL.g:12:9: '!='
			{
			DebugLocation(12, 9);
			Match("!="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__56", 4);
			LeaveRule("T__56", 4);
			LeaveRule_T__56();
		}
	}
	// $ANTLR end "T__56"

	partial void EnterRule_T__57();
	partial void LeaveRule_T__57();

	// $ANTLR start "T__57"
	[GrammarRule("T__57")]
	private void mT__57()
	{
		EnterRule_T__57();
		EnterRule("T__57", 5);
		TraceIn("T__57", 5);
		try
		{
			int _type = T__57;
			int _channel = DefaultTokenChannel;
			// LSL.g:13:7: ( '%' )
			DebugEnterAlt(1);
			// LSL.g:13:9: '%'
			{
			DebugLocation(13, 9);
			Match('%'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__57", 5);
			LeaveRule("T__57", 5);
			LeaveRule_T__57();
		}
	}
	// $ANTLR end "T__57"

	partial void EnterRule_T__58();
	partial void LeaveRule_T__58();

	// $ANTLR start "T__58"
	[GrammarRule("T__58")]
	private void mT__58()
	{
		EnterRule_T__58();
		EnterRule("T__58", 6);
		TraceIn("T__58", 6);
		try
		{
			int _type = T__58;
			int _channel = DefaultTokenChannel;
			// LSL.g:14:7: ( '%=' )
			DebugEnterAlt(1);
			// LSL.g:14:9: '%='
			{
			DebugLocation(14, 9);
			Match("%="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__58", 6);
			LeaveRule("T__58", 6);
			LeaveRule_T__58();
		}
	}
	// $ANTLR end "T__58"

	partial void EnterRule_T__59();
	partial void LeaveRule_T__59();

	// $ANTLR start "T__59"
	[GrammarRule("T__59")]
	private void mT__59()
	{
		EnterRule_T__59();
		EnterRule("T__59", 7);
		TraceIn("T__59", 7);
		try
		{
			int _type = T__59;
			int _channel = DefaultTokenChannel;
			// LSL.g:15:7: ( '&&' )
			DebugEnterAlt(1);
			// LSL.g:15:9: '&&'
			{
			DebugLocation(15, 9);
			Match("&&"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__59", 7);
			LeaveRule("T__59", 7);
			LeaveRule_T__59();
		}
	}
	// $ANTLR end "T__59"

	partial void EnterRule_T__60();
	partial void LeaveRule_T__60();

	// $ANTLR start "T__60"
	[GrammarRule("T__60")]
	private void mT__60()
	{
		EnterRule_T__60();
		EnterRule("T__60", 8);
		TraceIn("T__60", 8);
		try
		{
			int _type = T__60;
			int _channel = DefaultTokenChannel;
			// LSL.g:16:7: ( '&' )
			DebugEnterAlt(1);
			// LSL.g:16:9: '&'
			{
			DebugLocation(16, 9);
			Match('&'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__60", 8);
			LeaveRule("T__60", 8);
			LeaveRule_T__60();
		}
	}
	// $ANTLR end "T__60"

	partial void EnterRule_T__61();
	partial void LeaveRule_T__61();

	// $ANTLR start "T__61"
	[GrammarRule("T__61")]
	private void mT__61()
	{
		EnterRule_T__61();
		EnterRule("T__61", 9);
		TraceIn("T__61", 9);
		try
		{
			int _type = T__61;
			int _channel = DefaultTokenChannel;
			// LSL.g:17:7: ( '*' )
			DebugEnterAlt(1);
			// LSL.g:17:9: '*'
			{
			DebugLocation(17, 9);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__61", 9);
			LeaveRule("T__61", 9);
			LeaveRule_T__61();
		}
	}
	// $ANTLR end "T__61"

	partial void EnterRule_T__62();
	partial void LeaveRule_T__62();

	// $ANTLR start "T__62"
	[GrammarRule("T__62")]
	private void mT__62()
	{
		EnterRule_T__62();
		EnterRule("T__62", 10);
		TraceIn("T__62", 10);
		try
		{
			int _type = T__62;
			int _channel = DefaultTokenChannel;
			// LSL.g:18:7: ( '*=' )
			DebugEnterAlt(1);
			// LSL.g:18:9: '*='
			{
			DebugLocation(18, 9);
			Match("*="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__62", 10);
			LeaveRule("T__62", 10);
			LeaveRule_T__62();
		}
	}
	// $ANTLR end "T__62"

	partial void EnterRule_T__63();
	partial void LeaveRule_T__63();

	// $ANTLR start "T__63"
	[GrammarRule("T__63")]
	private void mT__63()
	{
		EnterRule_T__63();
		EnterRule("T__63", 11);
		TraceIn("T__63", 11);
		try
		{
			int _type = T__63;
			int _channel = DefaultTokenChannel;
			// LSL.g:19:7: ( '+' )
			DebugEnterAlt(1);
			// LSL.g:19:9: '+'
			{
			DebugLocation(19, 9);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__63", 11);
			LeaveRule("T__63", 11);
			LeaveRule_T__63();
		}
	}
	// $ANTLR end "T__63"

	partial void EnterRule_T__64();
	partial void LeaveRule_T__64();

	// $ANTLR start "T__64"
	[GrammarRule("T__64")]
	private void mT__64()
	{
		EnterRule_T__64();
		EnterRule("T__64", 12);
		TraceIn("T__64", 12);
		try
		{
			int _type = T__64;
			int _channel = DefaultTokenChannel;
			// LSL.g:20:7: ( '++' )
			DebugEnterAlt(1);
			// LSL.g:20:9: '++'
			{
			DebugLocation(20, 9);
			Match("++"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__64", 12);
			LeaveRule("T__64", 12);
			LeaveRule_T__64();
		}
	}
	// $ANTLR end "T__64"

	partial void EnterRule_T__65();
	partial void LeaveRule_T__65();

	// $ANTLR start "T__65"
	[GrammarRule("T__65")]
	private void mT__65()
	{
		EnterRule_T__65();
		EnterRule("T__65", 13);
		TraceIn("T__65", 13);
		try
		{
			int _type = T__65;
			int _channel = DefaultTokenChannel;
			// LSL.g:21:7: ( '+=' )
			DebugEnterAlt(1);
			// LSL.g:21:9: '+='
			{
			DebugLocation(21, 9);
			Match("+="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__65", 13);
			LeaveRule("T__65", 13);
			LeaveRule_T__65();
		}
	}
	// $ANTLR end "T__65"

	partial void EnterRule_T__66();
	partial void LeaveRule_T__66();

	// $ANTLR start "T__66"
	[GrammarRule("T__66")]
	private void mT__66()
	{
		EnterRule_T__66();
		EnterRule("T__66", 14);
		TraceIn("T__66", 14);
		try
		{
			int _type = T__66;
			int _channel = DefaultTokenChannel;
			// LSL.g:22:7: ( '--' )
			DebugEnterAlt(1);
			// LSL.g:22:9: '--'
			{
			DebugLocation(22, 9);
			Match("--"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__66", 14);
			LeaveRule("T__66", 14);
			LeaveRule_T__66();
		}
	}
	// $ANTLR end "T__66"

	partial void EnterRule_T__67();
	partial void LeaveRule_T__67();

	// $ANTLR start "T__67"
	[GrammarRule("T__67")]
	private void mT__67()
	{
		EnterRule_T__67();
		EnterRule("T__67", 15);
		TraceIn("T__67", 15);
		try
		{
			int _type = T__67;
			int _channel = DefaultTokenChannel;
			// LSL.g:23:7: ( '-=' )
			DebugEnterAlt(1);
			// LSL.g:23:9: '-='
			{
			DebugLocation(23, 9);
			Match("-="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__67", 15);
			LeaveRule("T__67", 15);
			LeaveRule_T__67();
		}
	}
	// $ANTLR end "T__67"

	partial void EnterRule_T__68();
	partial void LeaveRule_T__68();

	// $ANTLR start "T__68"
	[GrammarRule("T__68")]
	private void mT__68()
	{
		EnterRule_T__68();
		EnterRule("T__68", 16);
		TraceIn("T__68", 16);
		try
		{
			int _type = T__68;
			int _channel = DefaultTokenChannel;
			// LSL.g:24:7: ( '.' )
			DebugEnterAlt(1);
			// LSL.g:24:9: '.'
			{
			DebugLocation(24, 9);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__68", 16);
			LeaveRule("T__68", 16);
			LeaveRule_T__68();
		}
	}
	// $ANTLR end "T__68"

	partial void EnterRule_T__69();
	partial void LeaveRule_T__69();

	// $ANTLR start "T__69"
	[GrammarRule("T__69")]
	private void mT__69()
	{
		EnterRule_T__69();
		EnterRule("T__69", 17);
		TraceIn("T__69", 17);
		try
		{
			int _type = T__69;
			int _channel = DefaultTokenChannel;
			// LSL.g:25:7: ( '/' )
			DebugEnterAlt(1);
			// LSL.g:25:9: '/'
			{
			DebugLocation(25, 9);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__69", 17);
			LeaveRule("T__69", 17);
			LeaveRule_T__69();
		}
	}
	// $ANTLR end "T__69"

	partial void EnterRule_T__70();
	partial void LeaveRule_T__70();

	// $ANTLR start "T__70"
	[GrammarRule("T__70")]
	private void mT__70()
	{
		EnterRule_T__70();
		EnterRule("T__70", 18);
		TraceIn("T__70", 18);
		try
		{
			int _type = T__70;
			int _channel = DefaultTokenChannel;
			// LSL.g:26:7: ( '/=' )
			DebugEnterAlt(1);
			// LSL.g:26:9: '/='
			{
			DebugLocation(26, 9);
			Match("/="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__70", 18);
			LeaveRule("T__70", 18);
			LeaveRule_T__70();
		}
	}
	// $ANTLR end "T__70"

	partial void EnterRule_T__71();
	partial void LeaveRule_T__71();

	// $ANTLR start "T__71"
	[GrammarRule("T__71")]
	private void mT__71()
	{
		EnterRule_T__71();
		EnterRule("T__71", 19);
		TraceIn("T__71", 19);
		try
		{
			int _type = T__71;
			int _channel = DefaultTokenChannel;
			// LSL.g:27:7: ( '<<' )
			DebugEnterAlt(1);
			// LSL.g:27:9: '<<'
			{
			DebugLocation(27, 9);
			Match("<<"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__71", 19);
			LeaveRule("T__71", 19);
			LeaveRule_T__71();
		}
	}
	// $ANTLR end "T__71"

	partial void EnterRule_T__72();
	partial void LeaveRule_T__72();

	// $ANTLR start "T__72"
	[GrammarRule("T__72")]
	private void mT__72()
	{
		EnterRule_T__72();
		EnterRule("T__72", 20);
		TraceIn("T__72", 20);
		try
		{
			int _type = T__72;
			int _channel = DefaultTokenChannel;
			// LSL.g:28:7: ( '<<=' )
			DebugEnterAlt(1);
			// LSL.g:28:9: '<<='
			{
			DebugLocation(28, 9);
			Match("<<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__72", 20);
			LeaveRule("T__72", 20);
			LeaveRule_T__72();
		}
	}
	// $ANTLR end "T__72"

	partial void EnterRule_T__73();
	partial void LeaveRule_T__73();

	// $ANTLR start "T__73"
	[GrammarRule("T__73")]
	private void mT__73()
	{
		EnterRule_T__73();
		EnterRule("T__73", 21);
		TraceIn("T__73", 21);
		try
		{
			int _type = T__73;
			int _channel = DefaultTokenChannel;
			// LSL.g:29:7: ( '<=' )
			DebugEnterAlt(1);
			// LSL.g:29:9: '<='
			{
			DebugLocation(29, 9);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__73", 21);
			LeaveRule("T__73", 21);
			LeaveRule_T__73();
		}
	}
	// $ANTLR end "T__73"

	partial void EnterRule_T__74();
	partial void LeaveRule_T__74();

	// $ANTLR start "T__74"
	[GrammarRule("T__74")]
	private void mT__74()
	{
		EnterRule_T__74();
		EnterRule("T__74", 22);
		TraceIn("T__74", 22);
		try
		{
			int _type = T__74;
			int _channel = DefaultTokenChannel;
			// LSL.g:30:7: ( '==' )
			DebugEnterAlt(1);
			// LSL.g:30:9: '=='
			{
			DebugLocation(30, 9);
			Match("=="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__74", 22);
			LeaveRule("T__74", 22);
			LeaveRule_T__74();
		}
	}
	// $ANTLR end "T__74"

	partial void EnterRule_T__75();
	partial void LeaveRule_T__75();

	// $ANTLR start "T__75"
	[GrammarRule("T__75")]
	private void mT__75()
	{
		EnterRule_T__75();
		EnterRule("T__75", 23);
		TraceIn("T__75", 23);
		try
		{
			int _type = T__75;
			int _channel = DefaultTokenChannel;
			// LSL.g:31:7: ( '>=' )
			DebugEnterAlt(1);
			// LSL.g:31:9: '>='
			{
			DebugLocation(31, 9);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__75", 23);
			LeaveRule("T__75", 23);
			LeaveRule_T__75();
		}
	}
	// $ANTLR end "T__75"

	partial void EnterRule_T__76();
	partial void LeaveRule_T__76();

	// $ANTLR start "T__76"
	[GrammarRule("T__76")]
	private void mT__76()
	{
		EnterRule_T__76();
		EnterRule("T__76", 24);
		TraceIn("T__76", 24);
		try
		{
			int _type = T__76;
			int _channel = DefaultTokenChannel;
			// LSL.g:32:7: ( '>>' )
			DebugEnterAlt(1);
			// LSL.g:32:9: '>>'
			{
			DebugLocation(32, 9);
			Match(">>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__76", 24);
			LeaveRule("T__76", 24);
			LeaveRule_T__76();
		}
	}
	// $ANTLR end "T__76"

	partial void EnterRule_T__77();
	partial void LeaveRule_T__77();

	// $ANTLR start "T__77"
	[GrammarRule("T__77")]
	private void mT__77()
	{
		EnterRule_T__77();
		EnterRule("T__77", 25);
		TraceIn("T__77", 25);
		try
		{
			int _type = T__77;
			int _channel = DefaultTokenChannel;
			// LSL.g:33:7: ( '>>=' )
			DebugEnterAlt(1);
			// LSL.g:33:9: '>>='
			{
			DebugLocation(33, 9);
			Match(">>="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__77", 25);
			LeaveRule("T__77", 25);
			LeaveRule_T__77();
		}
	}
	// $ANTLR end "T__77"

	partial void EnterRule_T__78();
	partial void LeaveRule_T__78();

	// $ANTLR start "T__78"
	[GrammarRule("T__78")]
	private void mT__78()
	{
		EnterRule_T__78();
		EnterRule("T__78", 26);
		TraceIn("T__78", 26);
		try
		{
			int _type = T__78;
			int _channel = DefaultTokenChannel;
			// LSL.g:34:7: ( '@' )
			DebugEnterAlt(1);
			// LSL.g:34:9: '@'
			{
			DebugLocation(34, 9);
			Match('@'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__78", 26);
			LeaveRule("T__78", 26);
			LeaveRule_T__78();
		}
	}
	// $ANTLR end "T__78"

	partial void EnterRule_T__79();
	partial void LeaveRule_T__79();

	// $ANTLR start "T__79"
	[GrammarRule("T__79")]
	private void mT__79()
	{
		EnterRule_T__79();
		EnterRule("T__79", 27);
		TraceIn("T__79", 27);
		try
		{
			int _type = T__79;
			int _channel = DefaultTokenChannel;
			// LSL.g:35:7: ( '[' )
			DebugEnterAlt(1);
			// LSL.g:35:9: '['
			{
			DebugLocation(35, 9);
			Match('['); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__79", 27);
			LeaveRule("T__79", 27);
			LeaveRule_T__79();
		}
	}
	// $ANTLR end "T__79"

	partial void EnterRule_T__80();
	partial void LeaveRule_T__80();

	// $ANTLR start "T__80"
	[GrammarRule("T__80")]
	private void mT__80()
	{
		EnterRule_T__80();
		EnterRule("T__80", 28);
		TraceIn("T__80", 28);
		try
		{
			int _type = T__80;
			int _channel = DefaultTokenChannel;
			// LSL.g:36:7: ( ']' )
			DebugEnterAlt(1);
			// LSL.g:36:9: ']'
			{
			DebugLocation(36, 9);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__80", 28);
			LeaveRule("T__80", 28);
			LeaveRule_T__80();
		}
	}
	// $ANTLR end "T__80"

	partial void EnterRule_T__81();
	partial void LeaveRule_T__81();

	// $ANTLR start "T__81"
	[GrammarRule("T__81")]
	private void mT__81()
	{
		EnterRule_T__81();
		EnterRule("T__81", 29);
		TraceIn("T__81", 29);
		try
		{
			int _type = T__81;
			int _channel = DefaultTokenChannel;
			// LSL.g:37:7: ( '^' )
			DebugEnterAlt(1);
			// LSL.g:37:9: '^'
			{
			DebugLocation(37, 9);
			Match('^'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__81", 29);
			LeaveRule("T__81", 29);
			LeaveRule_T__81();
		}
	}
	// $ANTLR end "T__81"

	partial void EnterRule_T__82();
	partial void LeaveRule_T__82();

	// $ANTLR start "T__82"
	[GrammarRule("T__82")]
	private void mT__82()
	{
		EnterRule_T__82();
		EnterRule("T__82", 30);
		TraceIn("T__82", 30);
		try
		{
			int _type = T__82;
			int _channel = DefaultTokenChannel;
			// LSL.g:38:7: ( 'default' )
			DebugEnterAlt(1);
			// LSL.g:38:9: 'default'
			{
			DebugLocation(38, 9);
			Match("default"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__82", 30);
			LeaveRule("T__82", 30);
			LeaveRule_T__82();
		}
	}
	// $ANTLR end "T__82"

	partial void EnterRule_T__83();
	partial void LeaveRule_T__83();

	// $ANTLR start "T__83"
	[GrammarRule("T__83")]
	private void mT__83()
	{
		EnterRule_T__83();
		EnterRule("T__83", 31);
		TraceIn("T__83", 31);
		try
		{
			int _type = T__83;
			int _channel = DefaultTokenChannel;
			// LSL.g:39:7: ( 'do' )
			DebugEnterAlt(1);
			// LSL.g:39:9: 'do'
			{
			DebugLocation(39, 9);
			Match("do"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__83", 31);
			LeaveRule("T__83", 31);
			LeaveRule_T__83();
		}
	}
	// $ANTLR end "T__83"

	partial void EnterRule_T__84();
	partial void LeaveRule_T__84();

	// $ANTLR start "T__84"
	[GrammarRule("T__84")]
	private void mT__84()
	{
		EnterRule_T__84();
		EnterRule("T__84", 32);
		TraceIn("T__84", 32);
		try
		{
			int _type = T__84;
			int _channel = DefaultTokenChannel;
			// LSL.g:40:7: ( 'else' )
			DebugEnterAlt(1);
			// LSL.g:40:9: 'else'
			{
			DebugLocation(40, 9);
			Match("else"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__84", 32);
			LeaveRule("T__84", 32);
			LeaveRule_T__84();
		}
	}
	// $ANTLR end "T__84"

	partial void EnterRule_T__85();
	partial void LeaveRule_T__85();

	// $ANTLR start "T__85"
	[GrammarRule("T__85")]
	private void mT__85()
	{
		EnterRule_T__85();
		EnterRule("T__85", 33);
		TraceIn("T__85", 33);
		try
		{
			int _type = T__85;
			int _channel = DefaultTokenChannel;
			// LSL.g:41:7: ( 'for' )
			DebugEnterAlt(1);
			// LSL.g:41:9: 'for'
			{
			DebugLocation(41, 9);
			Match("for"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__85", 33);
			LeaveRule("T__85", 33);
			LeaveRule_T__85();
		}
	}
	// $ANTLR end "T__85"

	partial void EnterRule_T__86();
	partial void LeaveRule_T__86();

	// $ANTLR start "T__86"
	[GrammarRule("T__86")]
	private void mT__86()
	{
		EnterRule_T__86();
		EnterRule("T__86", 34);
		TraceIn("T__86", 34);
		try
		{
			int _type = T__86;
			int _channel = DefaultTokenChannel;
			// LSL.g:42:7: ( 'if' )
			DebugEnterAlt(1);
			// LSL.g:42:9: 'if'
			{
			DebugLocation(42, 9);
			Match("if"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__86", 34);
			LeaveRule("T__86", 34);
			LeaveRule_T__86();
		}
	}
	// $ANTLR end "T__86"

	partial void EnterRule_T__87();
	partial void LeaveRule_T__87();

	// $ANTLR start "T__87"
	[GrammarRule("T__87")]
	private void mT__87()
	{
		EnterRule_T__87();
		EnterRule("T__87", 35);
		TraceIn("T__87", 35);
		try
		{
			int _type = T__87;
			int _channel = DefaultTokenChannel;
			// LSL.g:43:7: ( 'jump' )
			DebugEnterAlt(1);
			// LSL.g:43:9: 'jump'
			{
			DebugLocation(43, 9);
			Match("jump"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__87", 35);
			LeaveRule("T__87", 35);
			LeaveRule_T__87();
		}
	}
	// $ANTLR end "T__87"

	partial void EnterRule_T__88();
	partial void LeaveRule_T__88();

	// $ANTLR start "T__88"
	[GrammarRule("T__88")]
	private void mT__88()
	{
		EnterRule_T__88();
		EnterRule("T__88", 36);
		TraceIn("T__88", 36);
		try
		{
			int _type = T__88;
			int _channel = DefaultTokenChannel;
			// LSL.g:44:7: ( 'return' )
			DebugEnterAlt(1);
			// LSL.g:44:9: 'return'
			{
			DebugLocation(44, 9);
			Match("return"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__88", 36);
			LeaveRule("T__88", 36);
			LeaveRule_T__88();
		}
	}
	// $ANTLR end "T__88"

	partial void EnterRule_T__89();
	partial void LeaveRule_T__89();

	// $ANTLR start "T__89"
	[GrammarRule("T__89")]
	private void mT__89()
	{
		EnterRule_T__89();
		EnterRule("T__89", 37);
		TraceIn("T__89", 37);
		try
		{
			int _type = T__89;
			int _channel = DefaultTokenChannel;
			// LSL.g:45:7: ( 'state' )
			DebugEnterAlt(1);
			// LSL.g:45:9: 'state'
			{
			DebugLocation(45, 9);
			Match("state"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__89", 37);
			LeaveRule("T__89", 37);
			LeaveRule_T__89();
		}
	}
	// $ANTLR end "T__89"

	partial void EnterRule_T__90();
	partial void LeaveRule_T__90();

	// $ANTLR start "T__90"
	[GrammarRule("T__90")]
	private void mT__90()
	{
		EnterRule_T__90();
		EnterRule("T__90", 38);
		TraceIn("T__90", 38);
		try
		{
			int _type = T__90;
			int _channel = DefaultTokenChannel;
			// LSL.g:46:7: ( 'while' )
			DebugEnterAlt(1);
			// LSL.g:46:9: 'while'
			{
			DebugLocation(46, 9);
			Match("while"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__90", 38);
			LeaveRule("T__90", 38);
			LeaveRule_T__90();
		}
	}
	// $ANTLR end "T__90"

	partial void EnterRule_T__91();
	partial void LeaveRule_T__91();

	// $ANTLR start "T__91"
	[GrammarRule("T__91")]
	private void mT__91()
	{
		EnterRule_T__91();
		EnterRule("T__91", 39);
		TraceIn("T__91", 39);
		try
		{
			int _type = T__91;
			int _channel = DefaultTokenChannel;
			// LSL.g:47:7: ( '{' )
			DebugEnterAlt(1);
			// LSL.g:47:9: '{'
			{
			DebugLocation(47, 9);
			Match('{'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__91", 39);
			LeaveRule("T__91", 39);
			LeaveRule_T__91();
		}
	}
	// $ANTLR end "T__91"

	partial void EnterRule_T__92();
	partial void LeaveRule_T__92();

	// $ANTLR start "T__92"
	[GrammarRule("T__92")]
	private void mT__92()
	{
		EnterRule_T__92();
		EnterRule("T__92", 40);
		TraceIn("T__92", 40);
		try
		{
			int _type = T__92;
			int _channel = DefaultTokenChannel;
			// LSL.g:48:7: ( '|' )
			DebugEnterAlt(1);
			// LSL.g:48:9: '|'
			{
			DebugLocation(48, 9);
			Match('|'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__92", 40);
			LeaveRule("T__92", 40);
			LeaveRule_T__92();
		}
	}
	// $ANTLR end "T__92"

	partial void EnterRule_T__93();
	partial void LeaveRule_T__93();

	// $ANTLR start "T__93"
	[GrammarRule("T__93")]
	private void mT__93()
	{
		EnterRule_T__93();
		EnterRule("T__93", 41);
		TraceIn("T__93", 41);
		try
		{
			int _type = T__93;
			int _channel = DefaultTokenChannel;
			// LSL.g:49:7: ( '||' )
			DebugEnterAlt(1);
			// LSL.g:49:9: '||'
			{
			DebugLocation(49, 9);
			Match("||"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__93", 41);
			LeaveRule("T__93", 41);
			LeaveRule_T__93();
		}
	}
	// $ANTLR end "T__93"

	partial void EnterRule_T__94();
	partial void LeaveRule_T__94();

	// $ANTLR start "T__94"
	[GrammarRule("T__94")]
	private void mT__94()
	{
		EnterRule_T__94();
		EnterRule("T__94", 42);
		TraceIn("T__94", 42);
		try
		{
			int _type = T__94;
			int _channel = DefaultTokenChannel;
			// LSL.g:50:7: ( '}' )
			DebugEnterAlt(1);
			// LSL.g:50:9: '}'
			{
			DebugLocation(50, 9);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__94", 42);
			LeaveRule("T__94", 42);
			LeaveRule_T__94();
		}
	}
	// $ANTLR end "T__94"

	partial void EnterRule_T__95();
	partial void LeaveRule_T__95();

	// $ANTLR start "T__95"
	[GrammarRule("T__95")]
	private void mT__95()
	{
		EnterRule_T__95();
		EnterRule("T__95", 43);
		TraceIn("T__95", 43);
		try
		{
			int _type = T__95;
			int _channel = DefaultTokenChannel;
			// LSL.g:51:7: ( '~' )
			DebugEnterAlt(1);
			// LSL.g:51:9: '~'
			{
			DebugLocation(51, 9);
			Match('~'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__95", 43);
			LeaveRule("T__95", 43);
			LeaveRule_T__95();
		}
	}
	// $ANTLR end "T__95"

	partial void EnterRule_TYPE();
	partial void LeaveRule_TYPE();

	// $ANTLR start "TYPE"
	[GrammarRule("TYPE")]
	private void mTYPE()
	{
		EnterRule_TYPE();
		EnterRule("TYPE", 44);
		TraceIn("TYPE", 44);
		try
		{
			int _type = TYPE;
			int _channel = DefaultTokenChannel;
			// LSL.g:330:6: ( ( 'integer' | 'float' | 'key' | 'vector' | 'rotation' | 'string' | 'list' ) )
			DebugEnterAlt(1);
			// LSL.g:330:8: ( 'integer' | 'float' | 'key' | 'vector' | 'rotation' | 'string' | 'list' )
			{
			DebugLocation(330, 8);
			// LSL.g:330:8: ( 'integer' | 'float' | 'key' | 'vector' | 'rotation' | 'string' | 'list' )
			int alt1=7;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, false);
			switch (input.LA(1))
			{
			case 'i':
				{
				alt1 = 1;
				}
				break;
			case 'f':
				{
				alt1 = 2;
				}
				break;
			case 'k':
				{
				alt1 = 3;
				}
				break;
			case 'v':
				{
				alt1 = 4;
				}
				break;
			case 'r':
				{
				alt1 = 5;
				}
				break;
			case 's':
				{
				alt1 = 6;
				}
				break;
			case 'l':
				{
				alt1 = 7;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 1, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// LSL.g:330:9: 'integer'
				{
				DebugLocation(330, 9);
				Match("integer"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// LSL.g:330:19: 'float'
				{
				DebugLocation(330, 19);
				Match("float"); 


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// LSL.g:330:27: 'key'
				{
				DebugLocation(330, 27);
				Match("key"); 


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// LSL.g:330:33: 'vector'
				{
				DebugLocation(330, 33);
				Match("vector"); 


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// LSL.g:330:42: 'rotation'
				{
				DebugLocation(330, 42);
				Match("rotation"); 


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// LSL.g:330:53: 'string'
				{
				DebugLocation(330, 53);
				Match("string"); 


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// LSL.g:330:62: 'list'
				{
				DebugLocation(330, 62);
				Match("list"); 


				}
				break;

			}
			} finally { DebugExitSubRule(1); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TYPE", 44);
			LeaveRule("TYPE", 44);
			LeaveRule_TYPE();
		}
	}
	// $ANTLR end "TYPE"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 45);
		TraceIn("ID", 45);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// LSL.g:333:4: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )* )
			DebugEnterAlt(1);
			// LSL.g:333:6: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )*
			{
			DebugLocation(333, 6);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();

			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}

			DebugLocation(333, 30);
			// LSL.g:333:30: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if (((LA2_0>='0' && LA2_0<='9')||(LA2_0>='A' && LA2_0<='Z')||LA2_0=='_'||(LA2_0>='a' && LA2_0<='z')))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// LSL.g:
					{
					DebugLocation(333, 30);
					input.Consume();


					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 45);
			LeaveRule("ID", 45);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_NEWLINE();
	partial void LeaveRule_NEWLINE();

	// $ANTLR start "NEWLINE"
	[GrammarRule("NEWLINE")]
	private void mNEWLINE()
	{
		EnterRule_NEWLINE();
		EnterRule("NEWLINE", 46);
		TraceIn("NEWLINE", 46);
		try
		{
			// LSL.g:338:9: ( ( ( '\\r' )? '\\n' ) )
			DebugEnterAlt(1);
			// LSL.g:338:11: ( ( '\\r' )? '\\n' )
			{
			DebugLocation(338, 11);
			// LSL.g:338:11: ( ( '\\r' )? '\\n' )
			DebugEnterAlt(1);
			// LSL.g:338:12: ( '\\r' )? '\\n'
			{
			DebugLocation(338, 12);
			// LSL.g:338:12: ( '\\r' )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_0 = input.LA(1);

			if ((LA3_0=='\r'))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// LSL.g:338:12: '\\r'
				{
				DebugLocation(338, 12);
				Match('\r'); 

				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(338, 18);
			Match('\n'); 

			}


			}

		}
		finally
		{
			TraceOut("NEWLINE", 46);
			LeaveRule("NEWLINE", 46);
			LeaveRule_NEWLINE();
		}
	}
	// $ANTLR end "NEWLINE"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 47);
		TraceIn("WS", 47);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// LSL.g:341:2: ( ( '\\t' | ' ' | ( '\\r' '\\n' | '\\r' | '\\n' ) ) )
			DebugEnterAlt(1);
			// LSL.g:342:3: ( '\\t' | ' ' | ( '\\r' '\\n' | '\\r' | '\\n' ) )
			{
			DebugLocation(342, 3);
			// LSL.g:342:3: ( '\\t' | ' ' | ( '\\r' '\\n' | '\\r' | '\\n' ) )
			int alt5=3;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case '\t':
				{
				alt5 = 1;
				}
				break;
			case ' ':
				{
				alt5 = 2;
				}
				break;
			case '\n':
			case '\r':
				{
				alt5 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// LSL.g:343:4: '\\t'
				{
				DebugLocation(343, 4);
				Match('\t'); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// LSL.g:345:4: ' '
				{
				DebugLocation(345, 4);
				Match(' '); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// LSL.g:347:4: ( '\\r' '\\n' | '\\r' | '\\n' )
				{
				DebugLocation(347, 4);
				// LSL.g:347:4: ( '\\r' '\\n' | '\\r' | '\\n' )
				int alt4=3;
				try { DebugEnterSubRule(4);
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if ((LA4_0=='\r'))
				{
					int LA4_1 = input.LA(2);

					if ((LA4_1=='\n'))
					{
						alt4 = 1;
					}
					else
					{
						alt4 = 2;}
				}
				else if ((LA4_0=='\n'))
				{
					alt4 = 3;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 4, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// LSL.g:347:6: '\\r' '\\n'
					{
					DebugLocation(347, 6);
					Match('\r'); 
					DebugLocation(347, 11);
					Match('\n'); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// LSL.g:348:6: '\\r'
					{
					DebugLocation(348, 6);
					Match('\r'); 

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// LSL.g:349:6: '\\n'
					{
					DebugLocation(349, 6);
					Match('\n'); 

					}
					break;

				}
				} finally { DebugExitSubRule(4); }


				}
				break;

			}
			} finally { DebugExitSubRule(5); }

			DebugLocation(352, 3);
			 _channel=TokenChannels.Hidden;  

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 47);
			LeaveRule("WS", 47);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_SEMI();
	partial void LeaveRule_SEMI();

	// $ANTLR start "SEMI"
	[GrammarRule("SEMI")]
	private void mSEMI()
	{
		EnterRule_SEMI();
		EnterRule("SEMI", 48);
		TraceIn("SEMI", 48);
		try
		{
			int _type = SEMI;
			int _channel = DefaultTokenChannel;
			// LSL.g:355:6: ( ';' )
			DebugEnterAlt(1);
			// LSL.g:355:8: ';'
			{
			DebugLocation(355, 8);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SEMI", 48);
			LeaveRule("SEMI", 48);
			LeaveRule_SEMI();
		}
	}
	// $ANTLR end "SEMI"

	partial void EnterRule_LT();
	partial void LeaveRule_LT();

	// $ANTLR start "LT"
	[GrammarRule("LT")]
	private void mLT()
	{
		EnterRule_LT();
		EnterRule("LT", 49);
		TraceIn("LT", 49);
		try
		{
			int _type = LT;
			int _channel = DefaultTokenChannel;
			// LSL.g:358:4: ( '<' )
			DebugEnterAlt(1);
			// LSL.g:358:6: '<'
			{
			DebugLocation(358, 6);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LT", 49);
			LeaveRule("LT", 49);
			LeaveRule_LT();
		}
	}
	// $ANTLR end "LT"

	partial void EnterRule_GT();
	partial void LeaveRule_GT();

	// $ANTLR start "GT"
	[GrammarRule("GT")]
	private void mGT()
	{
		EnterRule_GT();
		EnterRule("GT", 50);
		TraceIn("GT", 50);
		try
		{
			int _type = GT;
			int _channel = DefaultTokenChannel;
			// LSL.g:361:4: ( '>' )
			DebugEnterAlt(1);
			// LSL.g:361:6: '>'
			{
			DebugLocation(361, 6);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GT", 50);
			LeaveRule("GT", 50);
			LeaveRule_GT();
		}
	}
	// $ANTLR end "GT"

	partial void EnterRule_MINUS();
	partial void LeaveRule_MINUS();

	// $ANTLR start "MINUS"
	[GrammarRule("MINUS")]
	private void mMINUS()
	{
		EnterRule_MINUS();
		EnterRule("MINUS", 51);
		TraceIn("MINUS", 51);
		try
		{
			int _type = MINUS;
			int _channel = DefaultTokenChannel;
			// LSL.g:364:6: ( '-' )
			DebugEnterAlt(1);
			// LSL.g:364:8: '-'
			{
			DebugLocation(364, 8);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MINUS", 51);
			LeaveRule("MINUS", 51);
			LeaveRule_MINUS();
		}
	}
	// $ANTLR end "MINUS"

	partial void EnterRule_LPAREN();
	partial void LeaveRule_LPAREN();

	// $ANTLR start "LPAREN"
	[GrammarRule("LPAREN")]
	private void mLPAREN()
	{
		EnterRule_LPAREN();
		EnterRule("LPAREN", 52);
		TraceIn("LPAREN", 52);
		try
		{
			int _type = LPAREN;
			int _channel = DefaultTokenChannel;
			// LSL.g:366:8: ( '(' )
			DebugEnterAlt(1);
			// LSL.g:366:10: '('
			{
			DebugLocation(366, 10);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LPAREN", 52);
			LeaveRule("LPAREN", 52);
			LeaveRule_LPAREN();
		}
	}
	// $ANTLR end "LPAREN"

	partial void EnterRule_RPAREN();
	partial void LeaveRule_RPAREN();

	// $ANTLR start "RPAREN"
	[GrammarRule("RPAREN")]
	private void mRPAREN()
	{
		EnterRule_RPAREN();
		EnterRule("RPAREN", 53);
		TraceIn("RPAREN", 53);
		try
		{
			int _type = RPAREN;
			int _channel = DefaultTokenChannel;
			// LSL.g:369:8: ( ')' )
			DebugEnterAlt(1);
			// LSL.g:369:10: ')'
			{
			DebugLocation(369, 10);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RPAREN", 53);
			LeaveRule("RPAREN", 53);
			LeaveRule_RPAREN();
		}
	}
	// $ANTLR end "RPAREN"

	partial void EnterRule_COMMENT_SINGLE();
	partial void LeaveRule_COMMENT_SINGLE();

	// $ANTLR start "COMMENT_SINGLE"
	[GrammarRule("COMMENT_SINGLE")]
	private void mCOMMENT_SINGLE()
	{
		EnterRule_COMMENT_SINGLE();
		EnterRule("COMMENT_SINGLE", 54);
		TraceIn("COMMENT_SINGLE", 54);
		try
		{
			int _type = COMMENT_SINGLE;
			int _channel = DefaultTokenChannel;
			// LSL.g:373:2: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? ( '\\n' | EOF ) )
			DebugEnterAlt(1);
			// LSL.g:373:4: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? ( '\\n' | EOF )
			{
			DebugLocation(373, 4);
			Match("//"); 

			DebugLocation(373, 9);
			// LSL.g:373:9: (~ ( '\\n' | '\\r' ) )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if (((LA6_0>='\u0000' && LA6_0<='\t')||(LA6_0>='\u000B' && LA6_0<='\f')||(LA6_0>='\u000E' && LA6_0<='\uFFFF')))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// LSL.g:
					{
					DebugLocation(373, 9);
					input.Consume();


					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(373, 23);
			// LSL.g:373:23: ( '\\r' )?
			int alt7=2;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, false);
			int LA7_0 = input.LA(1);

			if ((LA7_0=='\r'))
			{
				alt7 = 1;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// LSL.g:373:23: '\\r'
				{
				DebugLocation(373, 23);
				Match('\r'); 

				}
				break;

			}
			} finally { DebugExitSubRule(7); }

			DebugLocation(373, 29);
			// LSL.g:373:29: ( '\\n' | EOF )
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, false);
			int LA8_0 = input.LA(1);

			if ((LA8_0=='\n'))
			{
				alt8 = 1;
			}
			else
			{
				alt8 = 2;}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// LSL.g:373:30: '\\n'
				{
				DebugLocation(373, 30);
				Match('\n'); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// LSL.g:373:37: EOF
				{
				DebugLocation(373, 37);
				Match(EOF); 

				}
				break;

			}
			} finally { DebugExitSubRule(8); }

			DebugLocation(373, 42);
			_channel=TokenChannels.Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMENT_SINGLE", 54);
			LeaveRule("COMMENT_SINGLE", 54);
			LeaveRule_COMMENT_SINGLE();
		}
	}
	// $ANTLR end "COMMENT_SINGLE"

	partial void EnterRule_COMMENT_BLOCK();
	partial void LeaveRule_COMMENT_BLOCK();

	// $ANTLR start "COMMENT_BLOCK"
	[GrammarRule("COMMENT_BLOCK")]
	private void mCOMMENT_BLOCK()
	{
		EnterRule_COMMENT_BLOCK();
		EnterRule("COMMENT_BLOCK", 55);
		TraceIn("COMMENT_BLOCK", 55);
		try
		{
			int _type = COMMENT_BLOCK;
			int _channel = DefaultTokenChannel;
			// LSL.g:377:2: ( '/*' ( options {greedy=false; } : . )* '*/' )
			DebugEnterAlt(1);
			// LSL.g:377:4: '/*' ( options {greedy=false; } : . )* '*/'
			{
			DebugLocation(377, 4);
			Match("/*"); 

			DebugLocation(377, 9);
			// LSL.g:377:9: ( options {greedy=false; } : . )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0=='*'))
				{
					int LA9_1 = input.LA(2);

					if ((LA9_1=='/'))
					{
						alt9 = 2;
					}
					else if (((LA9_1>='\u0000' && LA9_1<='.')||(LA9_1>='0' && LA9_1<='\uFFFF')))
					{
						alt9 = 1;
					}


				}
				else if (((LA9_0>='\u0000' && LA9_0<=')')||(LA9_0>='+' && LA9_0<='\uFFFF')))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// LSL.g:377:37: .
					{
					DebugLocation(377, 37);
					MatchAny(); 

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }

			DebugLocation(377, 42);
			Match("*/"); 

			DebugLocation(377, 47);
			 _channel=TokenChannels.Hidden;  

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMENT_BLOCK", 55);
			LeaveRule("COMMENT_BLOCK", 55);
			LeaveRule_COMMENT_BLOCK();
		}
	}
	// $ANTLR end "COMMENT_BLOCK"

	partial void EnterRule_STRING_LITERAL();
	partial void LeaveRule_STRING_LITERAL();

	// $ANTLR start "STRING_LITERAL"
	[GrammarRule("STRING_LITERAL")]
	private void mSTRING_LITERAL()
	{
		EnterRule_STRING_LITERAL();
		EnterRule("STRING_LITERAL", 56);
		TraceIn("STRING_LITERAL", 56);
		try
		{
			int _type = STRING_LITERAL;
			int _channel = DefaultTokenChannel;
			// LSL.g:381:2: ( '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"' )
			DebugEnterAlt(1);
			// LSL.g:381:5: '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"'
			{
			DebugLocation(381, 5);
			Match('\"'); 
			DebugLocation(381, 9);
			// LSL.g:381:9: ( ESC_SEQ |~ ( '\\\\' | '\"' ) )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=3;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0=='\\'))
				{
					alt10 = 1;
				}
				else if (((LA10_0>='\u0000' && LA10_0<='!')||(LA10_0>='#' && LA10_0<='[')||(LA10_0>=']' && LA10_0<='\uFFFF')))
				{
					alt10 = 2;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// LSL.g:381:11: ESC_SEQ
					{
					DebugLocation(381, 11);
					mESC_SEQ(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// LSL.g:381:21: ~ ( '\\\\' | '\"' )
					{
					DebugLocation(381, 21);
					input.Consume();


					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }

			DebugLocation(381, 36);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING_LITERAL", 56);
			LeaveRule("STRING_LITERAL", 56);
			LeaveRule_STRING_LITERAL();
		}
	}
	// $ANTLR end "STRING_LITERAL"

	partial void EnterRule_ESC_SEQ();
	partial void LeaveRule_ESC_SEQ();

	// $ANTLR start "ESC_SEQ"
	[GrammarRule("ESC_SEQ")]
	private void mESC_SEQ()
	{
		EnterRule_ESC_SEQ();
		EnterRule("ESC_SEQ", 57);
		TraceIn("ESC_SEQ", 57);
		try
		{
			// LSL.g:387:5: ( '\\\\' ( 't' | 'n' | '\\\"' | '\\\\' ) )
			DebugEnterAlt(1);
			// LSL.g:387:9: '\\\\' ( 't' | 'n' | '\\\"' | '\\\\' )
			{
			DebugLocation(387, 9);
			Match('\\'); 
			DebugLocation(387, 14);
			if (input.LA(1)=='\"'||input.LA(1)=='\\'||input.LA(1)=='n'||input.LA(1)=='t')
			{
				input.Consume();

			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}


			}

		}
		finally
		{
			TraceOut("ESC_SEQ", 57);
			LeaveRule("ESC_SEQ", 57);
			LeaveRule_ESC_SEQ();
		}
	}
	// $ANTLR end "ESC_SEQ"

	partial void EnterRule_INTEGER_LITERAL();
	partial void LeaveRule_INTEGER_LITERAL();

	// $ANTLR start "INTEGER_LITERAL"
	[GrammarRule("INTEGER_LITERAL")]
	private void mINTEGER_LITERAL()
	{
		EnterRule_INTEGER_LITERAL();
		EnterRule("INTEGER_LITERAL", 58);
		TraceIn("INTEGER_LITERAL", 58);
		try
		{
			int _type = INTEGER_LITERAL;
			int _channel = DefaultTokenChannel;
			// LSL.g:390:2: ( ( '0' .. '9' )+ | '0x' ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )+ )
			int alt13=2;
			try { DebugEnterDecision(13, false);
			int LA13_0 = input.LA(1);

			if ((LA13_0=='0'))
			{
				int LA13_1 = input.LA(2);

				if ((LA13_1=='x'))
				{
					alt13 = 2;
				}
				else
				{
					alt13 = 1;}
			}
			else if (((LA13_0>='1' && LA13_0<='9')))
			{
				alt13 = 1;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 13, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// LSL.g:390:4: ( '0' .. '9' )+
				{
				DebugLocation(390, 4);
				// LSL.g:390:4: ( '0' .. '9' )+
				int cnt11=0;
				try { DebugEnterSubRule(11);
				while (true)
				{
					int alt11=2;
					try { DebugEnterDecision(11, false);
					int LA11_0 = input.LA(1);

					if (((LA11_0>='0' && LA11_0<='9')))
					{
						alt11 = 1;
					}


					} finally { DebugExitDecision(11); }
					switch (alt11)
					{
					case 1:
						DebugEnterAlt(1);
						// LSL.g:
						{
						DebugLocation(390, 4);
						input.Consume();


						}
						break;

					default:
						if (cnt11 >= 1)
							goto loop11;

						EarlyExitException eee11 = new EarlyExitException( 11, input );
						DebugRecognitionException(eee11);
						throw eee11;
					}
					cnt11++;
				}
				loop11:
					;

				} finally { DebugExitSubRule(11); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// LSL.g:391:4: '0x' ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )+
				{
				DebugLocation(391, 4);
				Match("0x"); 

				DebugLocation(391, 9);
				// LSL.g:391:9: ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )+
				int cnt12=0;
				try { DebugEnterSubRule(12);
				while (true)
				{
					int alt12=2;
					try { DebugEnterDecision(12, false);
					int LA12_0 = input.LA(1);

					if (((LA12_0>='0' && LA12_0<='9')||(LA12_0>='A' && LA12_0<='F')||(LA12_0>='a' && LA12_0<='f')))
					{
						alt12 = 1;
					}


					} finally { DebugExitDecision(12); }
					switch (alt12)
					{
					case 1:
						DebugEnterAlt(1);
						// LSL.g:
						{
						DebugLocation(391, 9);
						input.Consume();


						}
						break;

					default:
						if (cnt12 >= 1)
							goto loop12;

						EarlyExitException eee12 = new EarlyExitException( 12, input );
						DebugRecognitionException(eee12);
						throw eee12;
					}
					cnt12++;
				}
				loop12:
					;

				} finally { DebugExitSubRule(12); }


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INTEGER_LITERAL", 58);
			LeaveRule("INTEGER_LITERAL", 58);
			LeaveRule_INTEGER_LITERAL();
		}
	}
	// $ANTLR end "INTEGER_LITERAL"

	partial void EnterRule_FLOAT_LITERAL();
	partial void LeaveRule_FLOAT_LITERAL();

	// $ANTLR start "FLOAT_LITERAL"
	[GrammarRule("FLOAT_LITERAL")]
	private void mFLOAT_LITERAL()
	{
		EnterRule_FLOAT_LITERAL();
		EnterRule("FLOAT_LITERAL", 59);
		TraceIn("FLOAT_LITERAL", 59);
		try
		{
			int _type = FLOAT_LITERAL;
			int _channel = DefaultTokenChannel;
			// LSL.g:395:2: ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT )
			int alt20=3;
			try { DebugEnterDecision(20, false);
			try
			{
				alt20 = dfa20.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// LSL.g:395:6: ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )?
				{
				DebugLocation(395, 6);
				// LSL.g:395:6: ( '0' .. '9' )+
				int cnt14=0;
				try { DebugEnterSubRule(14);
				while (true)
				{
					int alt14=2;
					try { DebugEnterDecision(14, false);
					int LA14_0 = input.LA(1);

					if (((LA14_0>='0' && LA14_0<='9')))
					{
						alt14 = 1;
					}


					} finally { DebugExitDecision(14); }
					switch (alt14)
					{
					case 1:
						DebugEnterAlt(1);
						// LSL.g:
						{
						DebugLocation(395, 6);
						input.Consume();


						}
						break;

					default:
						if (cnt14 >= 1)
							goto loop14;

						EarlyExitException eee14 = new EarlyExitException( 14, input );
						DebugRecognitionException(eee14);
						throw eee14;
					}
					cnt14++;
				}
				loop14:
					;

				} finally { DebugExitSubRule(14); }

				DebugLocation(395, 18);
				Match('.'); 
				DebugLocation(395, 22);
				// LSL.g:395:22: ( '0' .. '9' )*
				try { DebugEnterSubRule(15);
				while (true)
				{
					int alt15=2;
					try { DebugEnterDecision(15, false);
					int LA15_0 = input.LA(1);

					if (((LA15_0>='0' && LA15_0<='9')))
					{
						alt15 = 1;
					}


					} finally { DebugExitDecision(15); }
					switch ( alt15 )
					{
					case 1:
						DebugEnterAlt(1);
						// LSL.g:
						{
						DebugLocation(395, 22);
						input.Consume();


						}
						break;

					default:
						goto loop15;
					}
				}

				loop15:
					;

				} finally { DebugExitSubRule(15); }

				DebugLocation(395, 34);
				// LSL.g:395:34: ( EXPONENT )?
				int alt16=2;
				try { DebugEnterSubRule(16);
				try { DebugEnterDecision(16, false);
				int LA16_0 = input.LA(1);

				if ((LA16_0=='E'||LA16_0=='e'))
				{
					alt16 = 1;
				}
				} finally { DebugExitDecision(16); }
				switch (alt16)
				{
				case 1:
					DebugEnterAlt(1);
					// LSL.g:395:34: EXPONENT
					{
					DebugLocation(395, 34);
					mEXPONENT(); 

					}
					break;

				}
				} finally { DebugExitSubRule(16); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// LSL.g:396:6: '.' ( '0' .. '9' )+ ( EXPONENT )?
				{
				DebugLocation(396, 6);
				Match('.'); 
				DebugLocation(396, 10);
				// LSL.g:396:10: ( '0' .. '9' )+
				int cnt17=0;
				try { DebugEnterSubRule(17);
				while (true)
				{
					int alt17=2;
					try { DebugEnterDecision(17, false);
					int LA17_0 = input.LA(1);

					if (((LA17_0>='0' && LA17_0<='9')))
					{
						alt17 = 1;
					}


					} finally { DebugExitDecision(17); }
					switch (alt17)
					{
					case 1:
						DebugEnterAlt(1);
						// LSL.g:
						{
						DebugLocation(396, 10);
						input.Consume();


						}
						break;

					default:
						if (cnt17 >= 1)
							goto loop17;

						EarlyExitException eee17 = new EarlyExitException( 17, input );
						DebugRecognitionException(eee17);
						throw eee17;
					}
					cnt17++;
				}
				loop17:
					;

				} finally { DebugExitSubRule(17); }

				DebugLocation(396, 22);
				// LSL.g:396:22: ( EXPONENT )?
				int alt18=2;
				try { DebugEnterSubRule(18);
				try { DebugEnterDecision(18, false);
				int LA18_0 = input.LA(1);

				if ((LA18_0=='E'||LA18_0=='e'))
				{
					alt18 = 1;
				}
				} finally { DebugExitDecision(18); }
				switch (alt18)
				{
				case 1:
					DebugEnterAlt(1);
					// LSL.g:396:22: EXPONENT
					{
					DebugLocation(396, 22);
					mEXPONENT(); 

					}
					break;

				}
				} finally { DebugExitSubRule(18); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// LSL.g:397:6: ( '0' .. '9' )+ EXPONENT
				{
				DebugLocation(397, 6);
				// LSL.g:397:6: ( '0' .. '9' )+
				int cnt19=0;
				try { DebugEnterSubRule(19);
				while (true)
				{
					int alt19=2;
					try { DebugEnterDecision(19, false);
					int LA19_0 = input.LA(1);

					if (((LA19_0>='0' && LA19_0<='9')))
					{
						alt19 = 1;
					}


					} finally { DebugExitDecision(19); }
					switch (alt19)
					{
					case 1:
						DebugEnterAlt(1);
						// LSL.g:
						{
						DebugLocation(397, 6);
						input.Consume();


						}
						break;

					default:
						if (cnt19 >= 1)
							goto loop19;

						EarlyExitException eee19 = new EarlyExitException( 19, input );
						DebugRecognitionException(eee19);
						throw eee19;
					}
					cnt19++;
				}
				loop19:
					;

				} finally { DebugExitSubRule(19); }

				DebugLocation(397, 18);
				mEXPONENT(); 

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FLOAT_LITERAL", 59);
			LeaveRule("FLOAT_LITERAL", 59);
			LeaveRule_FLOAT_LITERAL();
		}
	}
	// $ANTLR end "FLOAT_LITERAL"

	partial void EnterRule_EXPONENT();
	partial void LeaveRule_EXPONENT();

	// $ANTLR start "EXPONENT"
	[GrammarRule("EXPONENT")]
	private void mEXPONENT()
	{
		EnterRule_EXPONENT();
		EnterRule("EXPONENT", 60);
		TraceIn("EXPONENT", 60);
		try
		{
			// LSL.g:402:10: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// LSL.g:402:12: ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+
			{
			DebugLocation(402, 12);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();

			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}

			DebugLocation(402, 22);
			// LSL.g:402:22: ( '+' | '-' )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_0 = input.LA(1);

			if ((LA21_0=='+'||LA21_0=='-'))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// LSL.g:
				{
				DebugLocation(402, 22);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(21); }

			DebugLocation(402, 33);
			// LSL.g:402:33: ( '0' .. '9' )+
			int cnt22=0;
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, false);
				int LA22_0 = input.LA(1);

				if (((LA22_0>='0' && LA22_0<='9')))
				{
					alt22 = 1;
				}


				} finally { DebugExitDecision(22); }
				switch (alt22)
				{
				case 1:
					DebugEnterAlt(1);
					// LSL.g:
					{
					DebugLocation(402, 33);
					input.Consume();


					}
					break;

				default:
					if (cnt22 >= 1)
						goto loop22;

					EarlyExitException eee22 = new EarlyExitException( 22, input );
					DebugRecognitionException(eee22);
					throw eee22;
				}
				cnt22++;
			}
			loop22:
				;

			} finally { DebugExitSubRule(22); }


			}

		}
		finally
		{
			TraceOut("EXPONENT", 60);
			LeaveRule("EXPONENT", 60);
			LeaveRule_EXPONENT();
		}
	}
	// $ANTLR end "EXPONENT"

	public override void mTokens()
	{
		// LSL.g:1:8: ( ASSIGN_EQ | COMMA | T__55 | T__56 | T__57 | T__58 | T__59 | T__60 | T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | T__74 | T__75 | T__76 | T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | T__85 | T__86 | T__87 | T__88 | T__89 | T__90 | T__91 | T__92 | T__93 | T__94 | T__95 | TYPE | ID | WS | SEMI | LT | GT | MINUS | LPAREN | RPAREN | COMMENT_SINGLE | COMMENT_BLOCK | STRING_LITERAL | INTEGER_LITERAL | FLOAT_LITERAL )
		int alt23=57;
		try { DebugEnterDecision(23, false);
		try
		{
			alt23 = dfa23.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(23); }
		switch (alt23)
		{
		case 1:
			DebugEnterAlt(1);
			// LSL.g:1:10: ASSIGN_EQ
			{
			DebugLocation(1, 10);
			mASSIGN_EQ(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// LSL.g:1:20: COMMA
			{
			DebugLocation(1, 20);
			mCOMMA(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// LSL.g:1:26: T__55
			{
			DebugLocation(1, 26);
			mT__55(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// LSL.g:1:32: T__56
			{
			DebugLocation(1, 32);
			mT__56(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// LSL.g:1:38: T__57
			{
			DebugLocation(1, 38);
			mT__57(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// LSL.g:1:44: T__58
			{
			DebugLocation(1, 44);
			mT__58(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// LSL.g:1:50: T__59
			{
			DebugLocation(1, 50);
			mT__59(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// LSL.g:1:56: T__60
			{
			DebugLocation(1, 56);
			mT__60(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// LSL.g:1:62: T__61
			{
			DebugLocation(1, 62);
			mT__61(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// LSL.g:1:68: T__62
			{
			DebugLocation(1, 68);
			mT__62(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// LSL.g:1:74: T__63
			{
			DebugLocation(1, 74);
			mT__63(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// LSL.g:1:80: T__64
			{
			DebugLocation(1, 80);
			mT__64(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// LSL.g:1:86: T__65
			{
			DebugLocation(1, 86);
			mT__65(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// LSL.g:1:92: T__66
			{
			DebugLocation(1, 92);
			mT__66(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// LSL.g:1:98: T__67
			{
			DebugLocation(1, 98);
			mT__67(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// LSL.g:1:104: T__68
			{
			DebugLocation(1, 104);
			mT__68(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// LSL.g:1:110: T__69
			{
			DebugLocation(1, 110);
			mT__69(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// LSL.g:1:116: T__70
			{
			DebugLocation(1, 116);
			mT__70(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// LSL.g:1:122: T__71
			{
			DebugLocation(1, 122);
			mT__71(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// LSL.g:1:128: T__72
			{
			DebugLocation(1, 128);
			mT__72(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// LSL.g:1:134: T__73
			{
			DebugLocation(1, 134);
			mT__73(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// LSL.g:1:140: T__74
			{
			DebugLocation(1, 140);
			mT__74(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// LSL.g:1:146: T__75
			{
			DebugLocation(1, 146);
			mT__75(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// LSL.g:1:152: T__76
			{
			DebugLocation(1, 152);
			mT__76(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// LSL.g:1:158: T__77
			{
			DebugLocation(1, 158);
			mT__77(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// LSL.g:1:164: T__78
			{
			DebugLocation(1, 164);
			mT__78(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// LSL.g:1:170: T__79
			{
			DebugLocation(1, 170);
			mT__79(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// LSL.g:1:176: T__80
			{
			DebugLocation(1, 176);
			mT__80(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// LSL.g:1:182: T__81
			{
			DebugLocation(1, 182);
			mT__81(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// LSL.g:1:188: T__82
			{
			DebugLocation(1, 188);
			mT__82(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// LSL.g:1:194: T__83
			{
			DebugLocation(1, 194);
			mT__83(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// LSL.g:1:200: T__84
			{
			DebugLocation(1, 200);
			mT__84(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// LSL.g:1:206: T__85
			{
			DebugLocation(1, 206);
			mT__85(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// LSL.g:1:212: T__86
			{
			DebugLocation(1, 212);
			mT__86(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// LSL.g:1:218: T__87
			{
			DebugLocation(1, 218);
			mT__87(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// LSL.g:1:224: T__88
			{
			DebugLocation(1, 224);
			mT__88(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// LSL.g:1:230: T__89
			{
			DebugLocation(1, 230);
			mT__89(); 

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// LSL.g:1:236: T__90
			{
			DebugLocation(1, 236);
			mT__90(); 

			}
			break;
		case 39:
			DebugEnterAlt(39);
			// LSL.g:1:242: T__91
			{
			DebugLocation(1, 242);
			mT__91(); 

			}
			break;
		case 40:
			DebugEnterAlt(40);
			// LSL.g:1:248: T__92
			{
			DebugLocation(1, 248);
			mT__92(); 

			}
			break;
		case 41:
			DebugEnterAlt(41);
			// LSL.g:1:254: T__93
			{
			DebugLocation(1, 254);
			mT__93(); 

			}
			break;
		case 42:
			DebugEnterAlt(42);
			// LSL.g:1:260: T__94
			{
			DebugLocation(1, 260);
			mT__94(); 

			}
			break;
		case 43:
			DebugEnterAlt(43);
			// LSL.g:1:266: T__95
			{
			DebugLocation(1, 266);
			mT__95(); 

			}
			break;
		case 44:
			DebugEnterAlt(44);
			// LSL.g:1:272: TYPE
			{
			DebugLocation(1, 272);
			mTYPE(); 

			}
			break;
		case 45:
			DebugEnterAlt(45);
			// LSL.g:1:277: ID
			{
			DebugLocation(1, 277);
			mID(); 

			}
			break;
		case 46:
			DebugEnterAlt(46);
			// LSL.g:1:280: WS
			{
			DebugLocation(1, 280);
			mWS(); 

			}
			break;
		case 47:
			DebugEnterAlt(47);
			// LSL.g:1:283: SEMI
			{
			DebugLocation(1, 283);
			mSEMI(); 

			}
			break;
		case 48:
			DebugEnterAlt(48);
			// LSL.g:1:288: LT
			{
			DebugLocation(1, 288);
			mLT(); 

			}
			break;
		case 49:
			DebugEnterAlt(49);
			// LSL.g:1:291: GT
			{
			DebugLocation(1, 291);
			mGT(); 

			}
			break;
		case 50:
			DebugEnterAlt(50);
			// LSL.g:1:294: MINUS
			{
			DebugLocation(1, 294);
			mMINUS(); 

			}
			break;
		case 51:
			DebugEnterAlt(51);
			// LSL.g:1:300: LPAREN
			{
			DebugLocation(1, 300);
			mLPAREN(); 

			}
			break;
		case 52:
			DebugEnterAlt(52);
			// LSL.g:1:307: RPAREN
			{
			DebugLocation(1, 307);
			mRPAREN(); 

			}
			break;
		case 53:
			DebugEnterAlt(53);
			// LSL.g:1:314: COMMENT_SINGLE
			{
			DebugLocation(1, 314);
			mCOMMENT_SINGLE(); 

			}
			break;
		case 54:
			DebugEnterAlt(54);
			// LSL.g:1:329: COMMENT_BLOCK
			{
			DebugLocation(1, 329);
			mCOMMENT_BLOCK(); 

			}
			break;
		case 55:
			DebugEnterAlt(55);
			// LSL.g:1:343: STRING_LITERAL
			{
			DebugLocation(1, 343);
			mSTRING_LITERAL(); 

			}
			break;
		case 56:
			DebugEnterAlt(56);
			// LSL.g:1:358: INTEGER_LITERAL
			{
			DebugLocation(1, 358);
			mINTEGER_LITERAL(); 

			}
			break;
		case 57:
			DebugEnterAlt(57);
			// LSL.g:1:374: FLOAT_LITERAL
			{
			DebugLocation(1, 374);
			mFLOAT_LITERAL(); 

			}
			break;

		}

	}


	#region DFA
	DFA20 dfa20;
	DFA23 dfa23;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa20 = new DFA20(this);
		dfa23 = new DFA23(this);
	}

	private class DFA20 : DFA
	{
		private const string DFA20_eotS =
			"\x5\xFFFF";
		private const string DFA20_eofS =
			"\x5\xFFFF";
		private const string DFA20_minS =
			"\x2\x2E\x3\xFFFF";
		private const string DFA20_maxS =
			"\x1\x39\x1\x65\x3\xFFFF";
		private const string DFA20_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1\x1\x3";
		private const string DFA20_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA20_transitionS =
			{
				"\x1\x2\x1\xFFFF\xA\x1",
				"\x1\x3\x1\xFFFF\xA\x1\xB\xFFFF\x1\x4\x1F\xFFFF\x1\x4",
				"",
				"",
				""
			};

		private static readonly short[] DFA20_eot = DFA.UnpackEncodedString(DFA20_eotS);
		private static readonly short[] DFA20_eof = DFA.UnpackEncodedString(DFA20_eofS);
		private static readonly char[] DFA20_min = DFA.UnpackEncodedStringToUnsignedChars(DFA20_minS);
		private static readonly char[] DFA20_max = DFA.UnpackEncodedStringToUnsignedChars(DFA20_maxS);
		private static readonly short[] DFA20_accept = DFA.UnpackEncodedString(DFA20_acceptS);
		private static readonly short[] DFA20_special = DFA.UnpackEncodedString(DFA20_specialS);
		private static readonly short[][] DFA20_transition;

		static DFA20()
		{
			int numStates = DFA20_transitionS.Length;
			DFA20_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA20_transition[i] = DFA.UnpackEncodedString(DFA20_transitionS[i]);
			}
		}

		public DFA20( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 20;
			this.eot = DFA20_eot;
			this.eof = DFA20_eof;
			this.min = DFA20_min;
			this.max = DFA20_max;
			this.accept = DFA20_accept;
			this.special = DFA20_special;
			this.transition = DFA20_transition;
		}

		public override string Description { get { return "394:1: FLOAT_LITERAL : ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA23 : DFA
	{
		private const string DFA23_eotS =
			"\x1\xFFFF\x1\x29\x1\xFFFF\x1\x2B\x1\x2D\x1\x2F\x1\x31\x1\x34\x1\x37\x1"+
			"\x38\x1\x3D\x1\x40\x1\x43\x4\xFFFF\x8\x20\x1\xFFFF\x1\x51\x2\xFFFF\x3"+
			"\x20\x6\xFFFF\x2\x55\x16\xFFFF\x1\x57\x3\xFFFF\x1\x59\x1\xFFFF\x1\x20"+
			"\x1\x5B\x3\x20\x1\x5F\x6\x20\x2\xFFFF\x3\x20\x5\xFFFF\x1\x20\x1\xFFFF"+
			"\x1\x20\x1\x6C\x1\x20\x1\xFFFF\x7\x20\x1\x75\x3\x20\x1\x79\x1\xFFFF\x2"+
			"\x20\x1\x7C\x5\x20\x1\xFFFF\x1\x20\x1\x75\x1\x20\x1\xFFFF\x1\x75\x1\x20"+
			"\x1\xFFFF\x2\x20\x1\x87\x1\x20\x1\x89\x3\x20\x1\x8D\x1\x20\x1\xFFFF\x1"+
			"\x75\x1\xFFFF\x1\x75\x1\x8F\x1\x75\x1\xFFFF\x1\x20\x1\xFFFF\x1\x75";
		private const string DFA23_eofS =
			"\x91\xFFFF";
		private const string DFA23_minS =
			"\x1\x9\x1\x3D\x1\xFFFF\x2\x3D\x1\x26\x1\x3D\x1\x2B\x1\x2D\x1\x30\x1\x2A"+
			"\x1\x3C\x1\x3D\x4\xFFFF\x1\x65\x2\x6C\x1\x66\x1\x75\x1\x65\x1\x74\x1"+
			"\x68\x1\xFFFF\x1\x7C\x2\xFFFF\x2\x65\x1\x69\x6\xFFFF\x2\x2E\x16\xFFFF"+
			"\x1\x3D\x3\xFFFF\x1\x3D\x1\xFFFF\x1\x66\x1\x30\x1\x73\x1\x72\x1\x6F\x1"+
			"\x30\x1\x74\x1\x6D\x2\x74\x1\x61\x1\x69\x2\xFFFF\x1\x79\x1\x63\x1\x73"+
			"\x5\xFFFF\x1\x61\x1\xFFFF\x1\x65\x1\x30\x1\x61\x1\xFFFF\x1\x65\x1\x70"+
			"\x1\x75\x1\x61\x1\x74\x1\x69\x1\x6C\x1\x30\x2\x74\x1\x75\x1\x30\x1\xFFFF"+
			"\x1\x74\x1\x67\x1\x30\x1\x72\x1\x74\x1\x65\x1\x6E\x1\x65\x1\xFFFF\x1"+
			"\x6F\x1\x30\x1\x6C\x1\xFFFF\x1\x30\x1\x65\x1\xFFFF\x1\x6E\x1\x69\x1\x30"+
			"\x1\x67\x1\x30\x1\x72\x1\x74\x1\x72\x1\x30\x1\x6F\x1\xFFFF\x1\x30\x1"+
			"\xFFFF\x3\x30\x1\xFFFF\x1\x6E\x1\xFFFF\x1\x30";
		private const string DFA23_maxS =
			"\x1\x7E\x1\x3D\x1\xFFFF\x2\x3D\x1\x26\x3\x3D\x1\x39\x2\x3D\x1\x3E\x4"+
			"\xFFFF\x1\x6F\x1\x6C\x1\x6F\x1\x6E\x1\x75\x1\x6F\x1\x74\x1\x68\x1\xFFFF"+
			"\x1\x7C\x2\xFFFF\x2\x65\x1\x69\x6\xFFFF\x2\x65\x16\xFFFF\x1\x3D\x3\xFFFF"+
			"\x1\x3D\x1\xFFFF\x1\x66\x1\x7A\x1\x73\x1\x72\x1\x6F\x1\x7A\x1\x74\x1"+
			"\x6D\x2\x74\x1\x72\x1\x69\x2\xFFFF\x1\x79\x1\x63\x1\x73\x5\xFFFF\x1\x61"+
			"\x1\xFFFF\x1\x65\x1\x7A\x1\x61\x1\xFFFF\x1\x65\x1\x70\x1\x75\x1\x61\x1"+
			"\x74\x1\x69\x1\x6C\x1\x7A\x2\x74\x1\x75\x1\x7A\x1\xFFFF\x1\x74\x1\x67"+
			"\x1\x7A\x1\x72\x1\x74\x1\x65\x1\x6E\x1\x65\x1\xFFFF\x1\x6F\x1\x7A\x1"+
			"\x6C\x1\xFFFF\x1\x7A\x1\x65\x1\xFFFF\x1\x6E\x1\x69\x1\x7A\x1\x67\x1\x7A"+
			"\x1\x72\x1\x74\x1\x72\x1\x7A\x1\x6F\x1\xFFFF\x1\x7A\x1\xFFFF\x3\x7A\x1"+
			"\xFFFF\x1\x6E\x1\xFFFF\x1\x7A";
		private const string DFA23_acceptS =
			"\x2\xFFFF\x1\x2\xA\xFFFF\x1\x1A\x1\x1B\x1\x1C\x1\x1D\x8\xFFFF\x1\x27"+
			"\x1\xFFFF\x1\x2A\x1\x2B\x3\xFFFF\x1\x2D\x1\x2E\x1\x2F\x1\x33\x1\x34\x1"+
			"\x37\x2\xFFFF\x1\x16\x1\x1\x1\x4\x1\x3\x1\x6\x1\x5\x1\x7\x1\x8\x1\xA"+
			"\x1\x9\x1\xC\x1\xD\x1\xB\x1\xE\x1\xF\x1\x32\x1\x10\x1\x39\x1\x12\x1\x35"+
			"\x1\x36\x1\x11\x1\xFFFF\x1\x15\x1\x30\x1\x17\x1\xFFFF\x1\x31\xC\xFFFF"+
			"\x1\x29\x1\x28\x3\xFFFF\x1\x38\x1\x14\x1\x13\x1\x19\x1\x18\x1\xFFFF\x1"+
			"\x1F\x3\xFFFF\x1\x22\xC\xFFFF\x1\x21\x8\xFFFF\x1\x2C\x3\xFFFF\x1\x20"+
			"\x2\xFFFF\x1\x23\xA\xFFFF\x1\x25\x1\xFFFF\x1\x26\x3\xFFFF\x1\x24\x1\xFFFF"+
			"\x1\x1E\x1\xFFFF";
		private const string DFA23_specialS =
			"\x91\xFFFF}>";
		private static readonly string[] DFA23_transitionS =
			{
				"\x2\x21\x2\xFFFF\x1\x21\x12\xFFFF\x1\x21\x1\x3\x1\x25\x2\xFFFF\x1\x4"+
				"\x1\x5\x1\xFFFF\x1\x23\x1\x24\x1\x6\x1\x7\x1\x2\x1\x8\x1\x9\x1\xA\x1"+
				"\x26\x9\x27\x1\xFFFF\x1\x22\x1\xB\x1\x1\x1\xC\x1\xFFFF\x1\xD\x1A\x20"+
				"\x1\xE\x1\xFFFF\x1\xF\x1\x10\x1\x20\x1\xFFFF\x3\x20\x1\x11\x1\x12\x1"+
				"\x13\x2\x20\x1\x14\x1\x15\x1\x1D\x1\x1F\x5\x20\x1\x16\x1\x17\x2\x20"+
				"\x1\x1E\x1\x18\x3\x20\x1\x19\x1\x1A\x1\x1B\x1\x1C",
				"\x1\x28",
				"",
				"\x1\x2A",
				"\x1\x2C",
				"\x1\x2E",
				"\x1\x30",
				"\x1\x32\x11\xFFFF\x1\x33",
				"\x1\x35\xF\xFFFF\x1\x36",
				"\xA\x39",
				"\x1\x3C\x4\xFFFF\x1\x3B\xD\xFFFF\x1\x3A",
				"\x1\x3E\x1\x3F",
				"\x1\x41\x1\x42",
				"",
				"",
				"",
				"",
				"\x1\x44\x9\xFFFF\x1\x45",
				"\x1\x46",
				"\x1\x48\x2\xFFFF\x1\x47",
				"\x1\x49\x7\xFFFF\x1\x4A",
				"\x1\x4B",
				"\x1\x4C\x9\xFFFF\x1\x4D",
				"\x1\x4E",
				"\x1\x4F",
				"",
				"\x1\x50",
				"",
				"",
				"\x1\x52",
				"\x1\x53",
				"\x1\x54",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x39\x1\xFFFF\xA\x27\xB\xFFFF\x1\x39\x1F\xFFFF\x1\x39",
				"\x1\x39\x1\xFFFF\xA\x27\xB\xFFFF\x1\x39\x1F\xFFFF\x1\x39",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x56",
				"",
				"",
				"",
				"\x1\x58",
				"",
				"\x1\x5A",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\x1\x5C",
				"\x1\x5D",
				"\x1\x5E",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\x1\x60",
				"\x1\x61",
				"\x1\x62",
				"\x1\x63",
				"\x1\x64\x10\xFFFF\x1\x65",
				"\x1\x66",
				"",
				"",
				"\x1\x67",
				"\x1\x68",
				"\x1\x69",
				"",
				"",
				"",
				"",
				"",
				"\x1\x6A",
				"",
				"\x1\x6B",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\x1\x6D",
				"",
				"\x1\x6E",
				"\x1\x6F",
				"\x1\x70",
				"\x1\x71",
				"\x1\x72",
				"\x1\x73",
				"\x1\x74",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\x1\x76",
				"\x1\x77",
				"\x1\x78",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"",
				"\x1\x7A",
				"\x1\x7B",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\x1\x7D",
				"\x1\x7E",
				"\x1\x7F",
				"\x1\x80",
				"\x1\x81",
				"",
				"\x1\x82",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\x1\x83",
				"",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\x1\x84",
				"",
				"\x1\x85",
				"\x1\x86",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\x1\x88",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\x1\x8A",
				"\x1\x8B",
				"\x1\x8C",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\x1\x8E",
				"",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20",
				"",
				"\x1\x90",
				"",
				"\xA\x20\x7\xFFFF\x1A\x20\x4\xFFFF\x1\x20\x1\xFFFF\x1A\x20"
			};

		private static readonly short[] DFA23_eot = DFA.UnpackEncodedString(DFA23_eotS);
		private static readonly short[] DFA23_eof = DFA.UnpackEncodedString(DFA23_eofS);
		private static readonly char[] DFA23_min = DFA.UnpackEncodedStringToUnsignedChars(DFA23_minS);
		private static readonly char[] DFA23_max = DFA.UnpackEncodedStringToUnsignedChars(DFA23_maxS);
		private static readonly short[] DFA23_accept = DFA.UnpackEncodedString(DFA23_acceptS);
		private static readonly short[] DFA23_special = DFA.UnpackEncodedString(DFA23_specialS);
		private static readonly short[][] DFA23_transition;

		static DFA23()
		{
			int numStates = DFA23_transitionS.Length;
			DFA23_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA23_transition[i] = DFA.UnpackEncodedString(DFA23_transitionS[i]);
			}
		}

		public DFA23( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 23;
			this.eot = DFA23_eot;
			this.eof = DFA23_eof;
			this.min = DFA23_min;
			this.max = DFA23_max;
			this.accept = DFA23_accept;
			this.special = DFA23_special;
			this.transition = DFA23_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( ASSIGN_EQ | COMMA | T__55 | T__56 | T__57 | T__58 | T__59 | T__60 | T__61 | T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | T__74 | T__75 | T__76 | T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | T__85 | T__86 | T__87 | T__88 | T__89 | T__90 | T__91 | T__92 | T__93 | T__94 | T__95 | TYPE | ID | WS | SEMI | LT | GT | MINUS | LPAREN | RPAREN | COMMENT_SINGLE | COMMENT_BLOCK | STRING_LITERAL | INTEGER_LITERAL | FLOAT_LITERAL );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}

} // namespace  Halcyon.Phlox.Compiler 

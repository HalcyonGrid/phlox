//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.3.1.7705
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.3.1.7705 FuncProtoToShim.g 2011-03-22 21:26:48

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162


using System.Collections.Generic;
using Antlr.Runtime;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.3.1.7705")]
[System.CLSCompliant(false)]
public partial class FuncProtoToShimLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int ID=4;
	public const int NEWLINE=5;
	public const int TYPE=6;
	public const int WS=7;
	public const int T__8=8;
	public const int T__9=9;
	public const int T__10=10;

    // delegates
    // delegators

	public FuncProtoToShimLexer()
	{
		OnCreated();
	}

	public FuncProtoToShimLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public FuncProtoToShimLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{


		OnCreated();
	}
	public override string GrammarFileName { get { return "FuncProtoToShim.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__8();
	partial void LeaveRule_T__8();

	// $ANTLR start "T__8"
	[GrammarRule("T__8")]
	private void mT__8()
	{
		EnterRule_T__8();
		EnterRule("T__8", 1);
		TraceIn("T__8", 1);
		try
		{
			int _type = T__8;
			int _channel = DefaultTokenChannel;
			// FuncProtoToShim.g:7:6: ( '(' )
			DebugEnterAlt(1);
			// FuncProtoToShim.g:7:8: '('
			{
			DebugLocation(7, 8);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__8", 1);
			LeaveRule("T__8", 1);
			LeaveRule_T__8();
		}
	}
	// $ANTLR end "T__8"

	partial void EnterRule_T__9();
	partial void LeaveRule_T__9();

	// $ANTLR start "T__9"
	[GrammarRule("T__9")]
	private void mT__9()
	{
		EnterRule_T__9();
		EnterRule("T__9", 2);
		TraceIn("T__9", 2);
		try
		{
			int _type = T__9;
			int _channel = DefaultTokenChannel;
			// FuncProtoToShim.g:8:6: ( ')' )
			DebugEnterAlt(1);
			// FuncProtoToShim.g:8:8: ')'
			{
			DebugLocation(8, 8);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__9", 2);
			LeaveRule("T__9", 2);
			LeaveRule_T__9();
		}
	}
	// $ANTLR end "T__9"

	partial void EnterRule_T__10();
	partial void LeaveRule_T__10();

	// $ANTLR start "T__10"
	[GrammarRule("T__10")]
	private void mT__10()
	{
		EnterRule_T__10();
		EnterRule("T__10", 3);
		TraceIn("T__10", 3);
		try
		{
			int _type = T__10;
			int _channel = DefaultTokenChannel;
			// FuncProtoToShim.g:9:7: ( ',' )
			DebugEnterAlt(1);
			// FuncProtoToShim.g:9:9: ','
			{
			DebugLocation(9, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__10", 3);
			LeaveRule("T__10", 3);
			LeaveRule_T__10();
		}
	}
	// $ANTLR end "T__10"

	partial void EnterRule_NEWLINE();
	partial void LeaveRule_NEWLINE();

	// $ANTLR start "NEWLINE"
	[GrammarRule("NEWLINE")]
	private void mNEWLINE()
	{
		EnterRule_NEWLINE();
		EnterRule("NEWLINE", 4);
		TraceIn("NEWLINE", 4);
		try
		{
			int _type = NEWLINE;
			int _channel = DefaultTokenChannel;
			// FuncProtoToShim.g:32:9: ( ( ( '\\r' )? '\\n' ) )
			DebugEnterAlt(1);
			// FuncProtoToShim.g:32:11: ( ( '\\r' )? '\\n' )
			{
			DebugLocation(32, 11);
			// FuncProtoToShim.g:32:11: ( ( '\\r' )? '\\n' )
			DebugEnterAlt(1);
			// FuncProtoToShim.g:32:12: ( '\\r' )? '\\n'
			{
			DebugLocation(32, 12);
			// FuncProtoToShim.g:32:12: ( '\\r' )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, false);
			int LA1_0 = input.LA(1);

			if ((LA1_0=='\r'))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// FuncProtoToShim.g:32:12: '\\r'
				{
				DebugLocation(32, 12);
				Match('\r'); 

				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(32, 18);
			Match('\n'); 

			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NEWLINE", 4);
			LeaveRule("NEWLINE", 4);
			LeaveRule_NEWLINE();
		}
	}
	// $ANTLR end "NEWLINE"

	partial void EnterRule_TYPE();
	partial void LeaveRule_TYPE();

	// $ANTLR start "TYPE"
	[GrammarRule("TYPE")]
	private void mTYPE()
	{
		EnterRule_TYPE();
		EnterRule("TYPE", 5);
		TraceIn("TYPE", 5);
		try
		{
			int _type = TYPE;
			int _channel = DefaultTokenChannel;
			// FuncProtoToShim.g:35:6: ( ( 'integer' | 'float' | 'key' | 'vector' | 'rotation' | 'string' | 'list' ) )
			DebugEnterAlt(1);
			// FuncProtoToShim.g:35:8: ( 'integer' | 'float' | 'key' | 'vector' | 'rotation' | 'string' | 'list' )
			{
			DebugLocation(35, 8);
			// FuncProtoToShim.g:35:8: ( 'integer' | 'float' | 'key' | 'vector' | 'rotation' | 'string' | 'list' )
			int alt2=7;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			switch (input.LA(1))
			{
			case 'i':
				{
				alt2 = 1;
				}
				break;
			case 'f':
				{
				alt2 = 2;
				}
				break;
			case 'k':
				{
				alt2 = 3;
				}
				break;
			case 'v':
				{
				alt2 = 4;
				}
				break;
			case 'r':
				{
				alt2 = 5;
				}
				break;
			case 's':
				{
				alt2 = 6;
				}
				break;
			case 'l':
				{
				alt2 = 7;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// FuncProtoToShim.g:35:9: 'integer'
				{
				DebugLocation(35, 9);
				Match("integer"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// FuncProtoToShim.g:35:19: 'float'
				{
				DebugLocation(35, 19);
				Match("float"); 


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// FuncProtoToShim.g:35:27: 'key'
				{
				DebugLocation(35, 27);
				Match("key"); 


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// FuncProtoToShim.g:35:33: 'vector'
				{
				DebugLocation(35, 33);
				Match("vector"); 


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// FuncProtoToShim.g:35:42: 'rotation'
				{
				DebugLocation(35, 42);
				Match("rotation"); 


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// FuncProtoToShim.g:35:53: 'string'
				{
				DebugLocation(35, 53);
				Match("string"); 


				}
				break;
			case 7:
				DebugEnterAlt(7);
				// FuncProtoToShim.g:35:62: 'list'
				{
				DebugLocation(35, 62);
				Match("list"); 


				}
				break;

			}
			} finally { DebugExitSubRule(2); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TYPE", 5);
			LeaveRule("TYPE", 5);
			LeaveRule_TYPE();
		}
	}
	// $ANTLR end "TYPE"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 6);
		TraceIn("ID", 6);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// FuncProtoToShim.g:38:4: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )* )
			DebugEnterAlt(1);
			// FuncProtoToShim.g:38:6: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )*
			{
			DebugLocation(38, 6);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();

			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}

			DebugLocation(38, 30);
			// FuncProtoToShim.g:38:30: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | '0' .. '9' )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if (((LA3_0>='0' && LA3_0<='9')||(LA3_0>='A' && LA3_0<='Z')||LA3_0=='_'||(LA3_0>='a' && LA3_0<='z')))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// FuncProtoToShim.g:
					{
					DebugLocation(38, 30);
					input.Consume();


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 6);
			LeaveRule("ID", 6);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 7);
		TraceIn("WS", 7);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// FuncProtoToShim.g:42:2: ( ( '\\t' | ' ' ) )
			DebugEnterAlt(1);
			// FuncProtoToShim.g:43:3: ( '\\t' | ' ' )
			{
			DebugLocation(43, 3);
			if (input.LA(1)=='\t'||input.LA(1)==' ')
			{
				input.Consume();

			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}

			DebugLocation(48, 3);
			 _channel=TokenChannels.Hidden;  

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 7);
			LeaveRule("WS", 7);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	public override void mTokens()
	{
		// FuncProtoToShim.g:1:8: ( T__8 | T__9 | T__10 | NEWLINE | TYPE | ID | WS )
		int alt4=7;
		try { DebugEnterDecision(4, false);
		try
		{
			alt4 = dfa4.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(4); }
		switch (alt4)
		{
		case 1:
			DebugEnterAlt(1);
			// FuncProtoToShim.g:1:10: T__8
			{
			DebugLocation(1, 10);
			mT__8(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// FuncProtoToShim.g:1:15: T__9
			{
			DebugLocation(1, 15);
			mT__9(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// FuncProtoToShim.g:1:20: T__10
			{
			DebugLocation(1, 20);
			mT__10(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// FuncProtoToShim.g:1:26: NEWLINE
			{
			DebugLocation(1, 26);
			mNEWLINE(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// FuncProtoToShim.g:1:34: TYPE
			{
			DebugLocation(1, 34);
			mTYPE(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// FuncProtoToShim.g:1:39: ID
			{
			DebugLocation(1, 39);
			mID(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// FuncProtoToShim.g:1:42: WS
			{
			DebugLocation(1, 42);
			mWS(); 

			}
			break;

		}

	}


	#region DFA
	DFA4 dfa4;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa4 = new DFA4(this);
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\x5\xFFFF\x7\xC\x2\xFFFF\x9\xC\x1\x1E\x6\xC\x1\xFFFF\x3\xC\x1\x1E\x1"+
			"\xC\x1\x1E\x4\xC\x1\x1E\x1\xC\x2\x1E\x1\xC\x1\x1E";
		private const string DFA4_eofS =
			"\x2F\xFFFF";
		private const string DFA4_minS =
			"\x1\x9\x4\xFFFF\x1\x6E\x1\x6C\x2\x65\x1\x6F\x1\x74\x1\x69\x2\xFFFF\x1"+
			"\x74\x1\x6F\x1\x79\x1\x63\x1\x74\x1\x72\x1\x73\x1\x65\x1\x61\x1\x30\x1"+
			"\x74\x1\x61\x1\x69\x1\x74\x1\x67\x1\x74\x1\xFFFF\x1\x6F\x1\x74\x1\x6E"+
			"\x1\x30\x1\x65\x1\x30\x1\x72\x1\x69\x1\x67\x1\x72\x1\x30\x1\x6F\x2\x30"+
			"\x1\x6E\x1\x30";
		private const string DFA4_maxS =
			"\x1\x7A\x4\xFFFF\x1\x6E\x1\x6C\x2\x65\x1\x6F\x1\x74\x1\x69\x2\xFFFF\x1"+
			"\x74\x1\x6F\x1\x79\x1\x63\x1\x74\x1\x72\x1\x73\x1\x65\x1\x61\x1\x7A\x1"+
			"\x74\x1\x61\x1\x69\x1\x74\x1\x67\x1\x74\x1\xFFFF\x1\x6F\x1\x74\x1\x6E"+
			"\x1\x7A\x1\x65\x1\x7A\x1\x72\x1\x69\x1\x67\x1\x72\x1\x7A\x1\x6F\x2\x7A"+
			"\x1\x6E\x1\x7A";
		private const string DFA4_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x7\xFFFF\x1\x6\x1\x7\x10\xFFFF\x1\x5"+
			"\x10\xFFFF";
		private const string DFA4_specialS =
			"\x2F\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\xD\x1\x4\x2\xFFFF\x1\x4\x12\xFFFF\x1\xD\x7\xFFFF\x1\x1\x1\x2\x2"+
				"\xFFFF\x1\x3\x14\xFFFF\x1A\xC\x4\xFFFF\x1\xC\x1\xFFFF\x5\xC\x1\x6\x2"+
				"\xC\x1\x5\x1\xC\x1\x7\x1\xB\x5\xC\x1\x9\x1\xA\x2\xC\x1\x8\x4\xC",
				"",
				"",
				"",
				"",
				"\x1\xE",
				"\x1\xF",
				"\x1\x10",
				"\x1\x11",
				"\x1\x12",
				"\x1\x13",
				"\x1\x14",
				"",
				"",
				"\x1\x15",
				"\x1\x16",
				"\x1\x17",
				"\x1\x18",
				"\x1\x19",
				"\x1\x1A",
				"\x1\x1B",
				"\x1\x1C",
				"\x1\x1D",
				"\xA\xC\x7\xFFFF\x1A\xC\x4\xFFFF\x1\xC\x1\xFFFF\x1A\xC",
				"\x1\x1F",
				"\x1\x20",
				"\x1\x21",
				"\x1\x22",
				"\x1\x23",
				"\x1\x24",
				"",
				"\x1\x25",
				"\x1\x26",
				"\x1\x27",
				"\xA\xC\x7\xFFFF\x1A\xC\x4\xFFFF\x1\xC\x1\xFFFF\x1A\xC",
				"\x1\x28",
				"\xA\xC\x7\xFFFF\x1A\xC\x4\xFFFF\x1\xC\x1\xFFFF\x1A\xC",
				"\x1\x29",
				"\x1\x2A",
				"\x1\x2B",
				"\x1\x2C",
				"\xA\xC\x7\xFFFF\x1A\xC\x4\xFFFF\x1\xC\x1\xFFFF\x1A\xC",
				"\x1\x2D",
				"\xA\xC\x7\xFFFF\x1A\xC\x4\xFFFF\x1\xC\x1\xFFFF\x1A\xC",
				"\xA\xC\x7\xFFFF\x1A\xC\x4\xFFFF\x1\xC\x1\xFFFF\x1A\xC",
				"\x1\x2E",
				"\xA\xC\x7\xFFFF\x1A\xC\x4\xFFFF\x1\xC\x1\xFFFF\x1A\xC"
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__8 | T__9 | T__10 | NEWLINE | TYPE | ID | WS );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}

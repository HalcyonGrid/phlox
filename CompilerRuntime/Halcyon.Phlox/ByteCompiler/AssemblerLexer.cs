//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.3.1.7705
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.3.1.7705 Assembler.g 2012-05-22 12:15:02

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162


using System.Collections.Generic;
using Antlr.Runtime;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.3.1.7705")]
[System.CLSCompliant(false)]
public partial class AssemblerLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int ESC_SEQ=4;
	public const int FLOAT=5;
	public const int FUNC=6;
	public const int ID=7;
	public const int INT=8;
	public const int LETTER=9;
	public const int NEWLINE=10;
	public const int REG=11;
	public const int ROTATION=12;
	public const int ROT_FLOATS=13;
	public const int STATE_ID=14;
	public const int STRING=15;
	public const int STR_INTERNALS=16;
	public const int VECTOR=17;
	public const int VEC_FLOATS=18;
	public const int WS=19;
	public const int T__20=20;
	public const int T__21=21;
	public const int T__22=22;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;

    // delegates
    // delegators

	public AssemblerLexer()
	{
		OnCreated();
	}

	public AssemblerLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public AssemblerLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{


		OnCreated();
	}
	public override string GrammarFileName { get { return "Assembler.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__20();
	partial void LeaveRule_T__20();

	// $ANTLR start "T__20"
	[GrammarRule("T__20")]
	private void mT__20()
	{
		EnterRule_T__20();
		EnterRule("T__20", 1);
		TraceIn("T__20", 1);
		try
		{
			int _type = T__20;
			int _channel = DefaultTokenChannel;
			// Assembler.g:7:7: ( ',' )
			DebugEnterAlt(1);
			// Assembler.g:7:9: ','
			{
			DebugLocation(7, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__20", 1);
			LeaveRule("T__20", 1);
			LeaveRule_T__20();
		}
	}
	// $ANTLR end "T__20"

	partial void EnterRule_T__21();
	partial void LeaveRule_T__21();

	// $ANTLR start "T__21"
	[GrammarRule("T__21")]
	private void mT__21()
	{
		EnterRule_T__21();
		EnterRule("T__21", 2);
		TraceIn("T__21", 2);
		try
		{
			int _type = T__21;
			int _channel = DefaultTokenChannel;
			// Assembler.g:8:7: ( '.def' )
			DebugEnterAlt(1);
			// Assembler.g:8:9: '.def'
			{
			DebugLocation(8, 9);
			Match(".def"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__21", 2);
			LeaveRule("T__21", 2);
			LeaveRule_T__21();
		}
	}
	// $ANTLR end "T__21"

	partial void EnterRule_T__22();
	partial void LeaveRule_T__22();

	// $ANTLR start "T__22"
	[GrammarRule("T__22")]
	private void mT__22()
	{
		EnterRule_T__22();
		EnterRule("T__22", 3);
		TraceIn("T__22", 3);
		try
		{
			int _type = T__22;
			int _channel = DefaultTokenChannel;
			// Assembler.g:9:7: ( '.evt' )
			DebugEnterAlt(1);
			// Assembler.g:9:9: '.evt'
			{
			DebugLocation(9, 9);
			Match(".evt"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__22", 3);
			LeaveRule("T__22", 3);
			LeaveRule_T__22();
		}
	}
	// $ANTLR end "T__22"

	partial void EnterRule_T__23();
	partial void LeaveRule_T__23();

	// $ANTLR start "T__23"
	[GrammarRule("T__23")]
	private void mT__23()
	{
		EnterRule_T__23();
		EnterRule("T__23", 4);
		TraceIn("T__23", 4);
		try
		{
			int _type = T__23;
			int _channel = DefaultTokenChannel;
			// Assembler.g:10:7: ( '.globals' )
			DebugEnterAlt(1);
			// Assembler.g:10:9: '.globals'
			{
			DebugLocation(10, 9);
			Match(".globals"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__23", 4);
			LeaveRule("T__23", 4);
			LeaveRule_T__23();
		}
	}
	// $ANTLR end "T__23"

	partial void EnterRule_T__24();
	partial void LeaveRule_T__24();

	// $ANTLR start "T__24"
	[GrammarRule("T__24")]
	private void mT__24()
	{
		EnterRule_T__24();
		EnterRule("T__24", 5);
		TraceIn("T__24", 5);
		try
		{
			int _type = T__24;
			int _channel = DefaultTokenChannel;
			// Assembler.g:11:7: ( '.statedef' )
			DebugEnterAlt(1);
			// Assembler.g:11:9: '.statedef'
			{
			DebugLocation(11, 9);
			Match(".statedef"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__24", 5);
			LeaveRule("T__24", 5);
			LeaveRule_T__24();
		}
	}
	// $ANTLR end "T__24"

	partial void EnterRule_T__25();
	partial void LeaveRule_T__25();

	// $ANTLR start "T__25"
	[GrammarRule("T__25")]
	private void mT__25()
	{
		EnterRule_T__25();
		EnterRule("T__25", 6);
		TraceIn("T__25", 6);
		try
		{
			int _type = T__25;
			int _channel = DefaultTokenChannel;
			// Assembler.g:12:7: ( '/' )
			DebugEnterAlt(1);
			// Assembler.g:12:9: '/'
			{
			DebugLocation(12, 9);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__25", 6);
			LeaveRule("T__25", 6);
			LeaveRule_T__25();
		}
	}
	// $ANTLR end "T__25"

	partial void EnterRule_T__26();
	partial void LeaveRule_T__26();

	// $ANTLR start "T__26"
	[GrammarRule("T__26")]
	private void mT__26()
	{
		EnterRule_T__26();
		EnterRule("T__26", 7);
		TraceIn("T__26", 7);
		try
		{
			int _type = T__26;
			int _channel = DefaultTokenChannel;
			// Assembler.g:13:7: ( ':' )
			DebugEnterAlt(1);
			// Assembler.g:13:9: ':'
			{
			DebugLocation(13, 9);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__26", 7);
			LeaveRule("T__26", 7);
			LeaveRule_T__26();
		}
	}
	// $ANTLR end "T__26"

	partial void EnterRule_T__27();
	partial void LeaveRule_T__27();

	// $ANTLR start "T__27"
	[GrammarRule("T__27")]
	private void mT__27()
	{
		EnterRule_T__27();
		EnterRule("T__27", 8);
		TraceIn("T__27", 8);
		try
		{
			int _type = T__27;
			int _channel = DefaultTokenChannel;
			// Assembler.g:14:7: ( '=' )
			DebugEnterAlt(1);
			// Assembler.g:14:9: '='
			{
			DebugLocation(14, 9);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__27", 8);
			LeaveRule("T__27", 8);
			LeaveRule_T__27();
		}
	}
	// $ANTLR end "T__27"

	partial void EnterRule_T__28();
	partial void LeaveRule_T__28();

	// $ANTLR start "T__28"
	[GrammarRule("T__28")]
	private void mT__28()
	{
		EnterRule_T__28();
		EnterRule("T__28", 9);
		TraceIn("T__28", 9);
		try
		{
			int _type = T__28;
			int _channel = DefaultTokenChannel;
			// Assembler.g:15:7: ( 'args' )
			DebugEnterAlt(1);
			// Assembler.g:15:9: 'args'
			{
			DebugLocation(15, 9);
			Match("args"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__28", 9);
			LeaveRule("T__28", 9);
			LeaveRule_T__28();
		}
	}
	// $ANTLR end "T__28"

	partial void EnterRule_T__29();
	partial void LeaveRule_T__29();

	// $ANTLR start "T__29"
	[GrammarRule("T__29")]
	private void mT__29()
	{
		EnterRule_T__29();
		EnterRule("T__29", 10);
		TraceIn("T__29", 10);
		try
		{
			int _type = T__29;
			int _channel = DefaultTokenChannel;
			// Assembler.g:16:7: ( 'locals' )
			DebugEnterAlt(1);
			// Assembler.g:16:9: 'locals'
			{
			DebugLocation(16, 9);
			Match("locals"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__29", 10);
			LeaveRule("T__29", 10);
			LeaveRule_T__29();
		}
	}
	// $ANTLR end "T__29"

	partial void EnterRule_STATE_ID();
	partial void LeaveRule_STATE_ID();

	// $ANTLR start "STATE_ID"
	[GrammarRule("STATE_ID")]
	private void mSTATE_ID()
	{
		EnterRule_STATE_ID();
		EnterRule("STATE_ID", 11);
		TraceIn("STATE_ID", 11);
		try
		{
			int _type = STATE_ID;
			int _channel = DefaultTokenChannel;
			CommonToken ID1 = default(CommonToken);

			// Assembler.g:96:9: ( '@' ID )
			DebugEnterAlt(1);
			// Assembler.g:96:11: '@' ID
			{
			DebugLocation(96, 11);
			Match('@'); 
			DebugLocation(96, 15);
			int ID1Start107 = CharIndex;
			int ID1StartLine107 = Line;
			int ID1StartCharPos107 = CharPositionInLine;
			mID(); 
			ID1 = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, ID1Start107, CharIndex-1);
			ID1.Line = ID1StartLine107;
			ID1.CharPositionInLine = ID1StartCharPos107;
			DebugLocation(96, 18);
			Text = (ID1!=null?ID1.Text:null);

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STATE_ID", 11);
			LeaveRule("STATE_ID", 11);
			LeaveRule_STATE_ID();
		}
	}
	// $ANTLR end "STATE_ID"

	partial void EnterRule_VECTOR();
	partial void LeaveRule_VECTOR();

	// $ANTLR start "VECTOR"
	[GrammarRule("VECTOR")]
	private void mVECTOR()
	{
		EnterRule_VECTOR();
		EnterRule("VECTOR", 12);
		TraceIn("VECTOR", 12);
		try
		{
			int _type = VECTOR;
			int _channel = DefaultTokenChannel;
			// Assembler.g:98:8: ( '<' VEC_FLOATS '>' )
			DebugEnterAlt(1);
			// Assembler.g:98:10: '<' VEC_FLOATS '>'
			{
			DebugLocation(98, 10);
			Match('<'); 
			DebugLocation(98, 14);
			mVEC_FLOATS(); 
			DebugLocation(98, 25);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("VECTOR", 12);
			LeaveRule("VECTOR", 12);
			LeaveRule_VECTOR();
		}
	}
	// $ANTLR end "VECTOR"

	partial void EnterRule_ROTATION();
	partial void LeaveRule_ROTATION();

	// $ANTLR start "ROTATION"
	[GrammarRule("ROTATION")]
	private void mROTATION()
	{
		EnterRule_ROTATION();
		EnterRule("ROTATION", 13);
		TraceIn("ROTATION", 13);
		try
		{
			int _type = ROTATION;
			int _channel = DefaultTokenChannel;
			// Assembler.g:100:9: ( '<' ROT_FLOATS '>' )
			DebugEnterAlt(1);
			// Assembler.g:100:11: '<' ROT_FLOATS '>'
			{
			DebugLocation(100, 11);
			Match('<'); 
			DebugLocation(100, 15);
			mROT_FLOATS(); 
			DebugLocation(100, 26);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ROTATION", 13);
			LeaveRule("ROTATION", 13);
			LeaveRule_ROTATION();
		}
	}
	// $ANTLR end "ROTATION"

	partial void EnterRule_VEC_FLOATS();
	partial void LeaveRule_VEC_FLOATS();

	// $ANTLR start "VEC_FLOATS"
	[GrammarRule("VEC_FLOATS")]
	private void mVEC_FLOATS()
	{
		EnterRule_VEC_FLOATS();
		EnterRule("VEC_FLOATS", 14);
		TraceIn("VEC_FLOATS", 14);
		try
		{
			// Assembler.g:103:2: ( FLOAT ',' FLOAT ',' FLOAT )
			DebugEnterAlt(1);
			// Assembler.g:103:4: FLOAT ',' FLOAT ',' FLOAT
			{
			DebugLocation(103, 4);
			mFLOAT(); 
			DebugLocation(103, 10);
			Match(','); 
			DebugLocation(103, 14);
			mFLOAT(); 
			DebugLocation(103, 20);
			Match(','); 
			DebugLocation(103, 24);
			mFLOAT(); 

			}

		}
		finally
		{
			TraceOut("VEC_FLOATS", 14);
			LeaveRule("VEC_FLOATS", 14);
			LeaveRule_VEC_FLOATS();
		}
	}
	// $ANTLR end "VEC_FLOATS"

	partial void EnterRule_ROT_FLOATS();
	partial void LeaveRule_ROT_FLOATS();

	// $ANTLR start "ROT_FLOATS"
	[GrammarRule("ROT_FLOATS")]
	private void mROT_FLOATS()
	{
		EnterRule_ROT_FLOATS();
		EnterRule("ROT_FLOATS", 15);
		TraceIn("ROT_FLOATS", 15);
		try
		{
			// Assembler.g:107:2: ( FLOAT ',' FLOAT ',' FLOAT ',' FLOAT )
			DebugEnterAlt(1);
			// Assembler.g:107:4: FLOAT ',' FLOAT ',' FLOAT ',' FLOAT
			{
			DebugLocation(107, 4);
			mFLOAT(); 
			DebugLocation(107, 10);
			Match(','); 
			DebugLocation(107, 14);
			mFLOAT(); 
			DebugLocation(107, 20);
			Match(','); 
			DebugLocation(107, 24);
			mFLOAT(); 
			DebugLocation(107, 30);
			Match(','); 
			DebugLocation(107, 34);
			mFLOAT(); 

			}

		}
		finally
		{
			TraceOut("ROT_FLOATS", 15);
			LeaveRule("ROT_FLOATS", 15);
			LeaveRule_ROT_FLOATS();
		}
	}
	// $ANTLR end "ROT_FLOATS"

	partial void EnterRule_REG();
	partial void LeaveRule_REG();

	// $ANTLR start "REG"
	[GrammarRule("REG")]
	private void mREG()
	{
		EnterRule_REG();
		EnterRule("REG", 16);
		TraceIn("REG", 16);
		try
		{
			int _type = REG;
			int _channel = DefaultTokenChannel;
			// Assembler.g:110:5: ( 'r' INT )
			DebugEnterAlt(1);
			// Assembler.g:110:9: 'r' INT
			{
			DebugLocation(110, 9);
			Match('r'); 
			DebugLocation(110, 13);
			mINT(); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("REG", 16);
			LeaveRule("REG", 16);
			LeaveRule_REG();
		}
	}
	// $ANTLR end "REG"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 17);
		TraceIn("ID", 17);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// Assembler.g:112:5: ( ( LETTER | '_' ) ( LETTER | '0' .. '9' | '_' | '.' )* )
			DebugEnterAlt(1);
			// Assembler.g:112:9: ( LETTER | '_' ) ( LETTER | '0' .. '9' | '_' | '.' )*
			{
			DebugLocation(112, 9);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();

			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}

			DebugLocation(112, 24);
			// Assembler.g:112:24: ( LETTER | '0' .. '9' | '_' | '.' )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0=='.'||(LA1_0>='0' && LA1_0<='9')||(LA1_0>='A' && LA1_0<='Z')||LA1_0=='_'||(LA1_0>='a' && LA1_0<='z')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// Assembler.g:
					{
					DebugLocation(112, 24);
					input.Consume();


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 17);
			LeaveRule("ID", 17);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_FUNC();
	partial void LeaveRule_FUNC();

	// $ANTLR start "FUNC"
	[GrammarRule("FUNC")]
	private void mFUNC()
	{
		EnterRule_FUNC();
		EnterRule("FUNC", 18);
		TraceIn("FUNC", 18);
		try
		{
			int _type = FUNC;
			int _channel = DefaultTokenChannel;
			CommonToken ID2 = default(CommonToken);

			// Assembler.g:114:5: ( ID '()' )
			DebugEnterAlt(1);
			// Assembler.g:114:9: ID '()'
			{
			DebugLocation(114, 9);
			int ID2Start229 = CharIndex;
			int ID2StartLine229 = Line;
			int ID2StartCharPos229 = CharPositionInLine;
			mID(); 
			ID2 = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, ID2Start229, CharIndex-1);
			ID2.Line = ID2StartLine229;
			ID2.CharPositionInLine = ID2StartCharPos229;
			DebugLocation(114, 12);
			Match("()"); 

			DebugLocation(114, 17);
			Text = (ID2!=null?ID2.Text:null);

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FUNC", 18);
			LeaveRule("FUNC", 18);
			LeaveRule_FUNC();
		}
	}
	// $ANTLR end "FUNC"

	partial void EnterRule_LETTER();
	partial void LeaveRule_LETTER();

	// $ANTLR start "LETTER"
	[GrammarRule("LETTER")]
	private void mLETTER()
	{
		EnterRule_LETTER();
		EnterRule("LETTER", 19);
		TraceIn("LETTER", 19);
		try
		{
			// Assembler.g:119:5: ( ( 'a' .. 'z' | 'A' .. 'Z' ) )
			DebugEnterAlt(1);
			// Assembler.g:
			{
			DebugLocation(119, 5);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();

			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}


			}

		}
		finally
		{
			TraceOut("LETTER", 19);
			LeaveRule("LETTER", 19);
			LeaveRule_LETTER();
		}
	}
	// $ANTLR end "LETTER"

	partial void EnterRule_INT();
	partial void LeaveRule_INT();

	// $ANTLR start "INT"
	[GrammarRule("INT")]
	private void mINT()
	{
		EnterRule_INT();
		EnterRule("INT", 20);
		TraceIn("INT", 20);
		try
		{
			int _type = INT;
			int _channel = DefaultTokenChannel;
			// Assembler.g:121:5: ( ( '-' )? ( '0' .. '9' )+ | ( '-' )? '0x' ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )+ )
			int alt6=2;
			try { DebugEnterDecision(6, false);
			switch (input.LA(1))
			{
			case '-':
				{
				int LA6_1 = input.LA(2);

				if ((LA6_1=='0'))
				{
					int LA6_2 = input.LA(3);

					if ((LA6_2=='x'))
					{
						alt6 = 2;
					}
					else
					{
						alt6 = 1;}
				}
				else if (((LA6_1>='1' && LA6_1<='9')))
				{
					alt6 = 1;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 6, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case '0':
				{
				int LA6_2 = input.LA(2);

				if ((LA6_2=='x'))
				{
					alt6 = 2;
				}
				else
				{
					alt6 = 1;}
				}
				break;
			case '1':
			case '2':
			case '3':
			case '4':
			case '5':
			case '6':
			case '7':
			case '8':
			case '9':
				{
				alt6 = 1;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 6, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// Assembler.g:121:9: ( '-' )? ( '0' .. '9' )+
				{
				DebugLocation(121, 9);
				// Assembler.g:121:9: ( '-' )?
				int alt2=2;
				try { DebugEnterSubRule(2);
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if ((LA2_0=='-'))
				{
					alt2 = 1;
				}
				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// Assembler.g:121:9: '-'
					{
					DebugLocation(121, 9);
					Match('-'); 

					}
					break;

				}
				} finally { DebugExitSubRule(2); }

				DebugLocation(121, 14);
				// Assembler.g:121:14: ( '0' .. '9' )+
				int cnt3=0;
				try { DebugEnterSubRule(3);
				while (true)
				{
					int alt3=2;
					try { DebugEnterDecision(3, false);
					int LA3_0 = input.LA(1);

					if (((LA3_0>='0' && LA3_0<='9')))
					{
						alt3 = 1;
					}


					} finally { DebugExitDecision(3); }
					switch (alt3)
					{
					case 1:
						DebugEnterAlt(1);
						// Assembler.g:
						{
						DebugLocation(121, 14);
						input.Consume();


						}
						break;

					default:
						if (cnt3 >= 1)
							goto loop3;

						EarlyExitException eee3 = new EarlyExitException( 3, input );
						DebugRecognitionException(eee3);
						throw eee3;
					}
					cnt3++;
				}
				loop3:
					;

				} finally { DebugExitSubRule(3); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Assembler.g:122:4: ( '-' )? '0x' ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )+
				{
				DebugLocation(122, 4);
				// Assembler.g:122:4: ( '-' )?
				int alt4=2;
				try { DebugEnterSubRule(4);
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if ((LA4_0=='-'))
				{
					alt4 = 1;
				}
				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// Assembler.g:122:4: '-'
					{
					DebugLocation(122, 4);
					Match('-'); 

					}
					break;

				}
				} finally { DebugExitSubRule(4); }

				DebugLocation(122, 9);
				Match("0x"); 

				DebugLocation(122, 14);
				// Assembler.g:122:14: ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )+
				int cnt5=0;
				try { DebugEnterSubRule(5);
				while (true)
				{
					int alt5=2;
					try { DebugEnterDecision(5, false);
					int LA5_0 = input.LA(1);

					if (((LA5_0>='0' && LA5_0<='9')||(LA5_0>='A' && LA5_0<='F')||(LA5_0>='a' && LA5_0<='f')))
					{
						alt5 = 1;
					}


					} finally { DebugExitDecision(5); }
					switch (alt5)
					{
					case 1:
						DebugEnterAlt(1);
						// Assembler.g:
						{
						DebugLocation(122, 14);
						input.Consume();


						}
						break;

					default:
						if (cnt5 >= 1)
							goto loop5;

						EarlyExitException eee5 = new EarlyExitException( 5, input );
						DebugRecognitionException(eee5);
						throw eee5;
					}
					cnt5++;
				}
				loop5:
					;

				} finally { DebugExitSubRule(5); }


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INT", 20);
			LeaveRule("INT", 20);
			LeaveRule_INT();
		}
	}
	// $ANTLR end "INT"

	partial void EnterRule_STRING();
	partial void LeaveRule_STRING();

	// $ANTLR start "STRING"
	[GrammarRule("STRING")]
	private void mSTRING()
	{
		EnterRule_STRING();
		EnterRule("STRING", 21);
		TraceIn("STRING", 21);
		try
		{
			int _type = STRING;
			int _channel = DefaultTokenChannel;
			CommonToken STR_INTERNALS3 = default(CommonToken);

			// Assembler.g:125:2: ( '\"' STR_INTERNALS '\"' )
			DebugEnterAlt(1);
			// Assembler.g:125:5: '\"' STR_INTERNALS '\"'
			{
			DebugLocation(125, 5);
			Match('\"'); 
			DebugLocation(125, 9);
			int STR_INTERNALS3Start314 = CharIndex;
			int STR_INTERNALS3StartLine314 = Line;
			int STR_INTERNALS3StartCharPos314 = CharPositionInLine;
			mSTR_INTERNALS(); 
			STR_INTERNALS3 = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, STR_INTERNALS3Start314, CharIndex-1);
			STR_INTERNALS3.Line = STR_INTERNALS3StartLine314;
			STR_INTERNALS3.CharPositionInLine = STR_INTERNALS3StartCharPos314;
			DebugLocation(125, 23);
			Match('\"'); 
			DebugLocation(125, 27);
			Text = (STR_INTERNALS3!=null?STR_INTERNALS3.Text:null);

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING", 21);
			LeaveRule("STRING", 21);
			LeaveRule_STRING();
		}
	}
	// $ANTLR end "STRING"

	partial void EnterRule_STR_INTERNALS();
	partial void LeaveRule_STR_INTERNALS();

	// $ANTLR start "STR_INTERNALS"
	[GrammarRule("STR_INTERNALS")]
	private void mSTR_INTERNALS()
	{
		EnterRule_STR_INTERNALS();
		EnterRule("STR_INTERNALS", 22);
		TraceIn("STR_INTERNALS", 22);
		try
		{
			// Assembler.g:131:2: ( ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* )
			DebugEnterAlt(1);
			// Assembler.g:131:4: ( ESC_SEQ |~ ( '\\\\' | '\"' ) )*
			{
			DebugLocation(131, 4);
			// Assembler.g:131:4: ( ESC_SEQ |~ ( '\\\\' | '\"' ) )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=3;
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0=='\\'))
				{
					alt7 = 1;
				}
				else if (((LA7_0>='\u0000' && LA7_0<='!')||(LA7_0>='#' && LA7_0<='[')||(LA7_0>=']' && LA7_0<='\uFFFF')))
				{
					alt7 = 2;
				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// Assembler.g:131:6: ESC_SEQ
					{
					DebugLocation(131, 6);
					mESC_SEQ(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Assembler.g:131:16: ~ ( '\\\\' | '\"' )
					{
					DebugLocation(131, 16);
					input.Consume();


					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }


			}

		}
		finally
		{
			TraceOut("STR_INTERNALS", 22);
			LeaveRule("STR_INTERNALS", 22);
			LeaveRule_STR_INTERNALS();
		}
	}
	// $ANTLR end "STR_INTERNALS"

	partial void EnterRule_ESC_SEQ();
	partial void LeaveRule_ESC_SEQ();

	// $ANTLR start "ESC_SEQ"
	[GrammarRule("ESC_SEQ")]
	private void mESC_SEQ()
	{
		EnterRule_ESC_SEQ();
		EnterRule("ESC_SEQ", 23);
		TraceIn("ESC_SEQ", 23);
		try
		{
			// Assembler.g:136:5: ( '\\\\' ( 't' | 'n' | '\\\"' | '\\\\' ) )
			DebugEnterAlt(1);
			// Assembler.g:136:9: '\\\\' ( 't' | 'n' | '\\\"' | '\\\\' )
			{
			DebugLocation(136, 9);
			Match('\\'); 
			DebugLocation(136, 14);
			if (input.LA(1)=='\"'||input.LA(1)=='\\'||input.LA(1)=='n'||input.LA(1)=='t')
			{
				input.Consume();

			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}


			}

		}
		finally
		{
			TraceOut("ESC_SEQ", 23);
			LeaveRule("ESC_SEQ", 23);
			LeaveRule_ESC_SEQ();
		}
	}
	// $ANTLR end "ESC_SEQ"

	partial void EnterRule_FLOAT();
	partial void LeaveRule_FLOAT();

	// $ANTLR start "FLOAT"
	[GrammarRule("FLOAT")]
	private void mFLOAT()
	{
		EnterRule_FLOAT();
		EnterRule("FLOAT", 24);
		TraceIn("FLOAT", 24);
		try
		{
			int _type = FLOAT;
			int _channel = DefaultTokenChannel;
			// Assembler.g:139:5: ( INT '.' ( INT )* | '.' ( INT )+ )
			int alt10=2;
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0=='-'||(LA10_0>='0' && LA10_0<='9')))
			{
				alt10 = 1;
			}
			else if ((LA10_0=='.'))
			{
				alt10 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// Assembler.g:139:9: INT '.' ( INT )*
				{
				DebugLocation(139, 9);
				mINT(); 
				DebugLocation(139, 13);
				Match('.'); 
				DebugLocation(139, 17);
				// Assembler.g:139:17: ( INT )*
				try { DebugEnterSubRule(8);
				while (true)
				{
					int alt8=2;
					try { DebugEnterDecision(8, false);
					int LA8_0 = input.LA(1);

					if ((LA8_0=='-'||(LA8_0>='0' && LA8_0<='9')))
					{
						alt8 = 1;
					}


					} finally { DebugExitDecision(8); }
					switch ( alt8 )
					{
					case 1:
						DebugEnterAlt(1);
						// Assembler.g:139:17: INT
						{
						DebugLocation(139, 17);
						mINT(); 

						}
						break;

					default:
						goto loop8;
					}
				}

				loop8:
					;

				} finally { DebugExitSubRule(8); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Assembler.g:140:9: '.' ( INT )+
				{
				DebugLocation(140, 9);
				Match('.'); 
				DebugLocation(140, 13);
				// Assembler.g:140:13: ( INT )+
				int cnt9=0;
				try { DebugEnterSubRule(9);
				while (true)
				{
					int alt9=2;
					try { DebugEnterDecision(9, false);
					int LA9_0 = input.LA(1);

					if ((LA9_0=='-'||(LA9_0>='0' && LA9_0<='9')))
					{
						alt9 = 1;
					}


					} finally { DebugExitDecision(9); }
					switch (alt9)
					{
					case 1:
						DebugEnterAlt(1);
						// Assembler.g:140:13: INT
						{
						DebugLocation(140, 13);
						mINT(); 

						}
						break;

					default:
						if (cnt9 >= 1)
							goto loop9;

						EarlyExitException eee9 = new EarlyExitException( 9, input );
						DebugRecognitionException(eee9);
						throw eee9;
					}
					cnt9++;
				}
				loop9:
					;

				} finally { DebugExitSubRule(9); }


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FLOAT", 24);
			LeaveRule("FLOAT", 24);
			LeaveRule_FLOAT();
		}
	}
	// $ANTLR end "FLOAT"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 25);
		TraceIn("WS", 25);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// Assembler.g:144:5: ( ( ' ' | '\\t' )+ )
			DebugEnterAlt(1);
			// Assembler.g:144:9: ( ' ' | '\\t' )+
			{
			DebugLocation(144, 9);
			// Assembler.g:144:9: ( ' ' | '\\t' )+
			int cnt11=0;
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0=='\t'||LA11_0==' '))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// Assembler.g:
					{
					DebugLocation(144, 9);
					input.Consume();


					}
					break;

				default:
					if (cnt11 >= 1)
						goto loop11;

					EarlyExitException eee11 = new EarlyExitException( 11, input );
					DebugRecognitionException(eee11);
					throw eee11;
				}
				cnt11++;
			}
			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(144, 21);
			Skip();

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 25);
			LeaveRule("WS", 25);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_NEWLINE();
	partial void LeaveRule_NEWLINE();

	// $ANTLR start "NEWLINE"
	[GrammarRule("NEWLINE")]
	private void mNEWLINE()
	{
		EnterRule_NEWLINE();
		EnterRule("NEWLINE", 26);
		TraceIn("NEWLINE", 26);
		try
		{
			int _type = NEWLINE;
			int _channel = DefaultTokenChannel;
			// Assembler.g:147:5: ( ( '\\r' )? '\\n' )
			DebugEnterAlt(1);
			// Assembler.g:147:9: ( '\\r' )? '\\n'
			{
			DebugLocation(147, 9);
			// Assembler.g:147:9: ( '\\r' )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, false);
			int LA12_0 = input.LA(1);

			if ((LA12_0=='\r'))
			{
				alt12 = 1;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// Assembler.g:147:9: '\\r'
				{
				DebugLocation(147, 9);
				Match('\r'); 

				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(147, 15);
			Match('\n'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NEWLINE", 26);
			LeaveRule("NEWLINE", 26);
			LeaveRule_NEWLINE();
		}
	}
	// $ANTLR end "NEWLINE"

	public override void mTokens()
	{
		// Assembler.g:1:8: ( T__20 | T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | STATE_ID | VECTOR | ROTATION | REG | ID | FUNC | INT | STRING | FLOAT | WS | NEWLINE )
		int alt13=21;
		try { DebugEnterDecision(13, false);
		try
		{
			alt13 = dfa13.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(13); }
		switch (alt13)
		{
		case 1:
			DebugEnterAlt(1);
			// Assembler.g:1:10: T__20
			{
			DebugLocation(1, 10);
			mT__20(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// Assembler.g:1:16: T__21
			{
			DebugLocation(1, 16);
			mT__21(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// Assembler.g:1:22: T__22
			{
			DebugLocation(1, 22);
			mT__22(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// Assembler.g:1:28: T__23
			{
			DebugLocation(1, 28);
			mT__23(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// Assembler.g:1:34: T__24
			{
			DebugLocation(1, 34);
			mT__24(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// Assembler.g:1:40: T__25
			{
			DebugLocation(1, 40);
			mT__25(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// Assembler.g:1:46: T__26
			{
			DebugLocation(1, 46);
			mT__26(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// Assembler.g:1:52: T__27
			{
			DebugLocation(1, 52);
			mT__27(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// Assembler.g:1:58: T__28
			{
			DebugLocation(1, 58);
			mT__28(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// Assembler.g:1:64: T__29
			{
			DebugLocation(1, 64);
			mT__29(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// Assembler.g:1:70: STATE_ID
			{
			DebugLocation(1, 70);
			mSTATE_ID(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// Assembler.g:1:79: VECTOR
			{
			DebugLocation(1, 79);
			mVECTOR(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// Assembler.g:1:86: ROTATION
			{
			DebugLocation(1, 86);
			mROTATION(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// Assembler.g:1:95: REG
			{
			DebugLocation(1, 95);
			mREG(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// Assembler.g:1:99: ID
			{
			DebugLocation(1, 99);
			mID(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// Assembler.g:1:102: FUNC
			{
			DebugLocation(1, 102);
			mFUNC(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// Assembler.g:1:107: INT
			{
			DebugLocation(1, 107);
			mINT(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// Assembler.g:1:111: STRING
			{
			DebugLocation(1, 111);
			mSTRING(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// Assembler.g:1:118: FLOAT
			{
			DebugLocation(1, 118);
			mFLOAT(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// Assembler.g:1:124: WS
			{
			DebugLocation(1, 124);
			mWS(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// Assembler.g:1:127: NEWLINE
			{
			DebugLocation(1, 127);
			mNEWLINE(); 

			}
			break;

		}

	}


	#region DFA
	DFA13 dfa13;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa13 = new DFA13(this);
	}

	private class DFA13 : DFA
	{
		private const string DFA13_eotS =
			"\x6\xFFFF\x2\x19\x2\xFFFF\x2\x19\x1\xFFFF\x2\x24\x8\xFFFF\x2\x19\x2\xFFFF"+
			"\x1\x19\x5\xFFFF\x2\x20\x2\xFFFF\x2\x19\x5\xFFFF\x1\x19\x1\x24\x1\x37"+
			"\x1\x19\x6\xFFFF\x1\x20\x1\xFFFF\x1\x19\x6\xFFFF\x1\x48\x2F\xFFFF";
		private const string DFA13_eofS =
			"\x6F\xFFFF";
		private const string DFA13_minS =
			"\x1\x9\x1\xFFFF\x1\x2D\x3\xFFFF\x2\x28\x1\xFFFF\x1\x2D\x2\x28\x1\x30"+
			"\x2\x2E\x8\xFFFF\x2\x28\x2\xFFFF\x1\x28\x1\x30\x2\x2E\x1\x2D\x1\xFFFF"+
			"\x2\x28\x1\x30\x1\xFFFF\x2\x28\x1\x30\x1\x2C\x1\x30\x2\x2C\x1\x28\x1"+
			"\x2E\x2\x28\x1\x2E\x1\x30\x2\x2C\x1\x2D\x1\x30\x1\x28\x1\xFFFF\x1\x28"+
			"\x2\x30\x2\x2E\x1\x2D\x1\x2C\x1\x28\x1\x2C\x1\x30\x1\x2C\x1\x30\x4\x2C"+
			"\x1\xFFFF\x2\x2C\x1\x2E\x1\x30\x2\x2C\x1\x2D\x3\x30\x2\x2E\x1\x2D\x2"+
			"\x2C\x1\x30\x1\x2C\x1\x30\x6\x2C\x1\x2E\x1\x30\x2\x2C\x2\xFFFF\x2\x30"+
			"\x6\x2C";
		private const string DFA13_maxS =
			"\x1\x7A\x1\xFFFF\x1\x73\x3\xFFFF\x2\x7A\x1\xFFFF\x1\x39\x2\x7A\x1\x39"+
			"\x1\x78\x1\x39\x8\xFFFF\x2\x7A\x2\xFFFF\x1\x7A\x1\x39\x1\x78\x2\x39\x1"+
			"\xFFFF\x2\x7A\x1\x66\x1\xFFFF\x2\x7A\x1\x66\x2\x39\x1\x78\x1\x39\x1\x7A"+
			"\x1\x66\x2\x7A\x1\x66\x1\x39\x1\x78\x2\x39\x1\x66\x1\x7A\x1\xFFFF\x1"+
			"\x7A\x1\x66\x1\x39\x1\x78\x2\x39\x1\x66\x1\x7A\x2\x66\x2\x39\x1\x78\x1"+
			"\x39\x1\x78\x1\x66\x1\xFFFF\x1\x78\x2\x66\x1\x39\x1\x78\x2\x39\x2\x66"+
			"\x1\x39\x1\x78\x2\x39\x3\x66\x1\x3E\x1\x39\x1\x78\x1\x3E\x1\x78\x1\x66"+
			"\x1\x78\x2\x66\x1\x39\x1\x78\x1\x3E\x2\xFFFF\x4\x66\x1\x78\x1\x66\x1"+
			"\x78\x1\x66";
		private const string DFA13_acceptS =
			"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x6\x1\x7\x1\x8\x2\xFFFF\x1\xB\x6\xFFFF\x1"+
			"\x12\x1\x14\x1\x15\x1\x2\x1\x3\x1\x4\x1\x5\x1\x13\x2\xFFFF\x1\xF\x1\x10"+
			"\x5\xFFFF\x1\xE\x3\xFFFF\x1\x11\x12\xFFFF\x1\x9\x10\xFFFF\x1\xA\x1C\xFFFF"+
			"\x1\xC\x1\xD\x8\xFFFF";
		private const string DFA13_specialS =
			"\x6F\xFFFF}>";
		private static readonly string[] DFA13_transitionS =
			{
				"\x1\x10\x1\x11\x2\xFFFF\x1\x11\x12\xFFFF\x1\x10\x1\xFFFF\x1\xF\x9\xFFFF"+
				"\x1\x1\x1\xC\x1\x2\x1\x3\x1\xD\x9\xE\x1\x4\x1\xFFFF\x1\x9\x1\x5\x2\xFFFF"+
				"\x1\x8\x1A\xB\x4\xFFFF\x1\xB\x1\xFFFF\x1\x6\xA\xB\x1\x7\x5\xB\x1\xA"+
				"\x8\xB",
				"",
				"\x1\x16\x2\xFFFF\xA\x16\x2A\xFFFF\x1\x12\x1\x13\x1\xFFFF\x1\x14\xB\xFFFF"+
				"\x1\x15",
				"",
				"",
				"",
				"\x1\x1A\x5\xFFFF\x1\x18\x1\xFFFF\xA\x18\x7\xFFFF\x1A\x18\x4\xFFFF\x1"+
				"\x18\x1\xFFFF\x11\x18\x1\x17\x8\x18",
				"\x1\x1A\x5\xFFFF\x1\x18\x1\xFFFF\xA\x18\x7\xFFFF\x1A\x18\x4\xFFFF\x1"+
				"\x18\x1\xFFFF\xE\x18\x1\x1B\xB\x18",
				"",
				"\x1\x1C\x1\x1F\x1\xFFFF\x1\x1D\x9\x1E",
				"\x1\x1A\x4\xFFFF\x1\x20\x1\x18\x1\xFFFF\x1\x21\x9\x22\x7\xFFFF\x1A\x18"+
				"\x4\xFFFF\x1\x18\x1\xFFFF\x1A\x18",
				"\x1\x1A\x5\xFFFF\x1\x18\x1\xFFFF\xA\x18\x7\xFFFF\x1A\x18\x4\xFFFF\x1"+
				"\x18\x1\xFFFF\x1A\x18",
				"\x1\xD\x9\xE",
				"\x1\x16\x1\xFFFF\xA\xE\x3E\xFFFF\x1\x23",
				"\x1\x16\x1\xFFFF\xA\xE",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x1A\x5\xFFFF\x1\x18\x1\xFFFF\xA\x18\x7\xFFFF\x1A\x18\x4\xFFFF\x1"+
				"\x18\x1\xFFFF\x6\x18\x1\x25\x13\x18",
				"\x1\x1A\x5\xFFFF\x1\x18\x1\xFFFF\xA\x18\x7\xFFFF\x1A\x18\x4\xFFFF\x1"+
				"\x18\x1\xFFFF\x1A\x18",
				"",
				"",
				"\x1\x1A\x5\xFFFF\x1\x18\x1\xFFFF\xA\x18\x7\xFFFF\x1A\x18\x4\xFFFF\x1"+
				"\x18\x1\xFFFF\x2\x18\x1\x26\x17\x18",
				"\x1\x1D\x9\x1E",
				"\x1\x28\x1\xFFFF\xA\x1E\x3E\xFFFF\x1\x27",
				"\x1\x28\x1\xFFFF\xA\x1E",
				"\x1\x29\x2\xFFFF\x1\x2A\x9\x2B",
				"",
				"\x1\x1A\x5\xFFFF\x1\x18\x1\xFFFF\xA\x22\x7\xFFFF\x1A\x18\x4\xFFFF\x1"+
				"\x18\x1\xFFFF\x17\x18\x1\x2C\x2\x18",
				"\x1\x1A\x5\xFFFF\x1\x18\x1\xFFFF\xA\x22\x7\xFFFF\x1A\x18\x4\xFFFF\x1"+
				"\x18\x1\xFFFF\x1A\x18",
				"\xA\x2D\x7\xFFFF\x6\x2D\x1A\xFFFF\x6\x2D",
				"",
				"\x1\x1A\x5\xFFFF\x1\x18\x1\xFFFF\xA\x18\x7\xFFFF\x1A\x18\x4\xFFFF\x1"+
				"\x18\x1\xFFFF\x12\x18\x1\x2E\x7\x18",
				"\x1\x1A\x5\xFFFF\x1\x18\x1\xFFFF\xA\x18\x7\xFFFF\x1A\x18\x4\xFFFF\x1"+
				"\x18\x1\xFFFF\x1\x2F\x19\x18",
				"\xA\x30\x7\xFFFF\x6\x30\x1A\xFFFF\x6\x30",
				"\x1\x34\x1\x31\x2\xFFFF\x1\x32\x9\x33",
				"\x1\x2A\x9\x2B",
				"\x1\x34\x1\x29\x2\xFFFF\x1\x2A\x9\x2B\x3E\xFFFF\x1\x35",
				"\x1\x34\x1\x29\x2\xFFFF\x1\x2A\x9\x2B",
				"\x1\x1A\x5\xFFFF\x1\x18\x1\xFFFF\xA\x36\x7\xFFFF\x6\x36\x14\x18\x4\xFFFF"+
				"\x1\x18\x1\xFFFF\x6\x36\x14\x18",
				"\x1\x16\x1\xFFFF\xA\x2D\x7\xFFFF\x6\x2D\x1A\xFFFF\x6\x2D",
				"\x1\x1A\x5\xFFFF\x1\x18\x1\xFFFF\xA\x18\x7\xFFFF\x1A\x18\x4\xFFFF\x1"+
				"\x18\x1\xFFFF\x1A\x18",
				"\x1\x1A\x5\xFFFF\x1\x18\x1\xFFFF\xA\x18\x7\xFFFF\x1A\x18\x4\xFFFF\x1"+
				"\x18\x1\xFFFF\xB\x18\x1\x38\xE\x18",
				"\x1\x28\x1\xFFFF\xA\x30\x7\xFFFF\x6\x30\x1A\xFFFF\x6\x30",
				"\x1\x32\x9\x33",
				"\x1\x34\x1\x31\x2\xFFFF\x1\x32\x9\x33\x3E\xFFFF\x1\x39",
				"\x1\x34\x1\x31\x2\xFFFF\x1\x32\x9\x33",
				"\x1\x3A\x1\x3D\x1\xFFFF\x1\x3B\x9\x3C",
				"\xA\x3E\x7\xFFFF\x6\x3E\x1A\xFFFF\x6\x3E",
				"\x1\x1A\x5\xFFFF\x1\x18\x1\xFFFF\xA\x36\x7\xFFFF\x6\x36\x14\x18\x4\xFFFF"+
				"\x1\x18\x1\xFFFF\x6\x36\x14\x18",
				"",
				"\x1\x1A\x5\xFFFF\x1\x18\x1\xFFFF\xA\x18\x7\xFFFF\x1A\x18\x4\xFFFF\x1"+
				"\x18\x1\xFFFF\x12\x18\x1\x3F\x7\x18",
				"\xA\x40\x7\xFFFF\x6\x40\x1A\xFFFF\x6\x40",
				"\x1\x3B\x9\x3C",
				"\x1\x42\x1\xFFFF\xA\x3C\x3E\xFFFF\x1\x41",
				"\x1\x42\x1\xFFFF\xA\x3C",
				"\x1\x43\x2\xFFFF\x1\x44\x9\x45",
				"\x1\x34\x1\x29\x2\xFFFF\x1\x46\x9\x47\x7\xFFFF\x6\x3E\x1A\xFFFF\x6\x3E",
				"\x1\x1A\x5\xFFFF\x1\x18\x1\xFFFF\xA\x18\x7\xFFFF\x1A\x18\x4\xFFFF\x1"+
				"\x18\x1\xFFFF\x1A\x18",
				"\x1\x34\x1\x31\x2\xFFFF\x1\x49\x9\x4A\x7\xFFFF\x6\x40\x1A\xFFFF\x6\x40",
				"\xA\x4B\x7\xFFFF\x6\x4B\x1A\xFFFF\x6\x4B",
				"\x1\x4F\x1\x4C\x2\xFFFF\x1\x4D\x9\x4E",
				"\x1\x44\x9\x45",
				"\x1\x4F\x1\x43\x2\xFFFF\x1\x44\x9\x45\x3E\xFFFF\x1\x50",
				"\x1\x4F\x1\x43\x2\xFFFF\x1\x44\x9\x45",
				"\x1\x34\x1\x29\x2\xFFFF\x1\x46\x9\x47\x7\xFFFF\x6\x3E\x1A\xFFFF\x6\x3E"+
				"\x11\xFFFF\x1\x35",
				"\x1\x34\x1\x29\x2\xFFFF\x1\x46\x9\x47\x7\xFFFF\x6\x3E\x1A\xFFFF\x6\x3E",
				"",
				"\x1\x34\x1\x31\x2\xFFFF\x1\x49\x9\x4A\x7\xFFFF\x6\x40\x1A\xFFFF\x6\x40"+
				"\x11\xFFFF\x1\x39",
				"\x1\x34\x1\x31\x2\xFFFF\x1\x49\x9\x4A\x7\xFFFF\x6\x40\x1A\xFFFF\x6\x40",
				"\x1\x42\x1\xFFFF\xA\x4B\x7\xFFFF\x6\x4B\x1A\xFFFF\x6\x4B",
				"\x1\x4D\x9\x4E",
				"\x1\x4F\x1\x4C\x2\xFFFF\x1\x4D\x9\x4E\x3E\xFFFF\x1\x51",
				"\x1\x4F\x1\x4C\x2\xFFFF\x1\x4D\x9\x4E",
				"\x1\x52\x1\x55\x1\xFFFF\x1\x53\x9\x54",
				"\xA\x56\x7\xFFFF\x6\x56\x1A\xFFFF\x6\x56",
				"\xA\x57\x7\xFFFF\x6\x57\x1A\xFFFF\x6\x57",
				"\x1\x53\x9\x54",
				"\x1\x59\x1\xFFFF\xA\x54\x3E\xFFFF\x1\x58",
				"\x1\x59\x1\xFFFF\xA\x54",
				"\x1\x5A\x2\xFFFF\x1\x5B\x9\x5C",
				"\x1\x4F\x1\x43\x2\xFFFF\x1\x5D\x9\x5E\x7\xFFFF\x6\x56\x1A\xFFFF\x6\x56",
				"\x1\x4F\x1\x4C\x2\xFFFF\x1\x5F\x9\x60\x7\xFFFF\x6\x57\x1A\xFFFF\x6\x57",
				"\xA\x61\x7\xFFFF\x6\x61\x1A\xFFFF\x6\x61",
				"\x1\x66\x1\x62\x2\xFFFF\x1\x63\x9\x64\x4\xFFFF\x1\x65",
				"\x1\x5B\x9\x5C",
				"\x1\x66\x1\x5A\x2\xFFFF\x1\x5B\x9\x5C\x4\xFFFF\x1\x65\x39\xFFFF\x1\x67",
				"\x1\x66\x1\x5A\x2\xFFFF\x1\x5B\x9\x5C\x4\xFFFF\x1\x65",
				"\x1\x4F\x1\x43\x2\xFFFF\x1\x5D\x9\x5E\x7\xFFFF\x6\x56\x1A\xFFFF\x6\x56"+
				"\x11\xFFFF\x1\x50",
				"\x1\x4F\x1\x43\x2\xFFFF\x1\x5D\x9\x5E\x7\xFFFF\x6\x56\x1A\xFFFF\x6\x56",
				"\x1\x4F\x1\x4C\x2\xFFFF\x1\x5F\x9\x60\x7\xFFFF\x6\x57\x1A\xFFFF\x6\x57"+
				"\x11\xFFFF\x1\x51",
				"\x1\x4F\x1\x4C\x2\xFFFF\x1\x5F\x9\x60\x7\xFFFF\x6\x57\x1A\xFFFF\x6\x57",
				"\x1\x59\x1\xFFFF\xA\x61\x7\xFFFF\x6\x61\x1A\xFFFF\x6\x61",
				"\x1\x63\x9\x64",
				"\x1\x66\x1\x62\x2\xFFFF\x1\x63\x9\x64\x4\xFFFF\x1\x65\x39\xFFFF\x1\x68",
				"\x1\x66\x1\x62\x2\xFFFF\x1\x63\x9\x64\x4\xFFFF\x1\x65",
				"",
				"",
				"\xA\x69\x7\xFFFF\x6\x69\x1A\xFFFF\x6\x69",
				"\xA\x6A\x7\xFFFF\x6\x6A\x1A\xFFFF\x6\x6A",
				"\x1\x66\x1\x5A\x2\xFFFF\x1\x6B\x9\x6C\x4\xFFFF\x1\x65\x2\xFFFF\x6\x69"+
				"\x1A\xFFFF\x6\x69",
				"\x1\x66\x1\x62\x2\xFFFF\x1\x6D\x9\x6E\x4\xFFFF\x1\x65\x2\xFFFF\x6\x6A"+
				"\x1A\xFFFF\x6\x6A",
				"\x1\x66\x1\x5A\x2\xFFFF\x1\x6B\x9\x6C\x4\xFFFF\x1\x65\x2\xFFFF\x6\x69"+
				"\x1A\xFFFF\x6\x69\x11\xFFFF\x1\x67",
				"\x1\x66\x1\x5A\x2\xFFFF\x1\x6B\x9\x6C\x4\xFFFF\x1\x65\x2\xFFFF\x6\x69"+
				"\x1A\xFFFF\x6\x69",
				"\x1\x66\x1\x62\x2\xFFFF\x1\x6D\x9\x6E\x4\xFFFF\x1\x65\x2\xFFFF\x6\x6A"+
				"\x1A\xFFFF\x6\x6A\x11\xFFFF\x1\x68",
				"\x1\x66\x1\x62\x2\xFFFF\x1\x6D\x9\x6E\x4\xFFFF\x1\x65\x2\xFFFF\x6\x6A"+
				"\x1A\xFFFF\x6\x6A"
			};

		private static readonly short[] DFA13_eot = DFA.UnpackEncodedString(DFA13_eotS);
		private static readonly short[] DFA13_eof = DFA.UnpackEncodedString(DFA13_eofS);
		private static readonly char[] DFA13_min = DFA.UnpackEncodedStringToUnsignedChars(DFA13_minS);
		private static readonly char[] DFA13_max = DFA.UnpackEncodedStringToUnsignedChars(DFA13_maxS);
		private static readonly short[] DFA13_accept = DFA.UnpackEncodedString(DFA13_acceptS);
		private static readonly short[] DFA13_special = DFA.UnpackEncodedString(DFA13_specialS);
		private static readonly short[][] DFA13_transition;

		static DFA13()
		{
			int numStates = DFA13_transitionS.Length;
			DFA13_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA13_transition[i] = DFA.UnpackEncodedString(DFA13_transitionS[i]);
			}
		}

		public DFA13( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 13;
			this.eot = DFA13_eot;
			this.eof = DFA13_eof;
			this.min = DFA13_min;
			this.max = DFA13_max;
			this.accept = DFA13_accept;
			this.special = DFA13_special;
			this.transition = DFA13_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__20 | T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | STATE_ID | VECTOR | ROTATION | REG | ID | FUNC | INT | STRING | FLOAT | WS | NEWLINE );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}
